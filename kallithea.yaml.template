#cloud-config

# Install Samba AD DC on first boot
apt_mirror: http://ubuntu.catalyst.net.nz/ubuntu
apt_mirror_search:
  - http://ubuntu.catalyst.net.nz/ubuntu
locale: en_NZ.UTF-8

packages:
 - screen
 - git
 - mercurial
 - python-virtualenv
 - python-pip
 - python-ldap
 - python-dev
 - python-pastescript
 - python-bcrypt
 - apache2
 - libapache2-mod-wsgi
 - ssl-cert

#package_upgrade: true

write_files:
 - content: |
    #!/bin/bash
    set -x
    set -e
    mkdir -p /usr/local/kallithea
    mkdir -p /usr/local/kallithea/repos
    mkdir -p /usr/local/kallithea/db
    mkdir -p /usr/local/kallithea/venv
    mkdir -p /usr/local/kallithea/wsgi
    chown git /usr/local/kallithea/repos
    chown git /usr/local/kallithea/db
    chown git /usr/local/kallithea/venv
    cd /usr/local/kallithea
    git clone git://git.catalyst.net.nz/kallithea.git git
    chown -R git git
   path: /usr/local/bin/install-kallithea
   permissions: '0755'
 - content: |
    #!/bin/bash
    set -x
    set -e
    cd /usr/local/kallithea/git
    git remote add our_repo {remote}
    git fetch our_repo
    git checkout our_repo/{branch}
    virtualenv /usr/local/kallithea/venv
    source /usr/local/kallithea/venv/bin/activate
    pip install -U setuptools
    python setup.py develop
    python setup.py compile_catalog   # for translation of the UI
   path: /usr/local/bin/build-kallithea
   permissions: '0755'
 - content: |
    #!/bin/bash
    set -x
    set -e
    cd /usr/local/kallithea/db
    source /usr/local/kallithea/venv/bin/activate
    rm -f /usr/local/kallithea/db/my.ini
    paster make-config Kallithea /usr/local/kallithea/db/my.ini
    patch /usr/local/kallithea/db/my.ini <  /usr/local/kallithea/my.ini.patch
   path: /usr/local/bin/configure-kallithea
   permissions: '0755'
 - content: |
    #!/bin/bash
    set -x
    set -e
    mkdir -p /home/git/.ssh
    chmod 755 /home/git/.ssh
    cd /usr/local/kallithea/db
    source /usr/local/kallithea/venv/bin/activate
    paster setup-db /usr/local/kallithea/db/my.ini --user={user} --password={password} --email={email} --repos=/usr/local/kallithea/repos  --force-yes
   path: /usr/local/bin/provision-kallithea
   permissions: '0755'
 - content: |
    --- production.ini  2015-06-18 00:54:23.997781151 +0000
    +++ my.ini  2015-06-22 23:25:40.849781151 +0000
    @@ -20,20 +15,25 @@
     ## any error reports after application crash                                  ##
     ## Additionally those settings will be used by Kallithea mailing system       ##
     ################################################################################
    -#email_to = admin@localhost
    -#error_email_from = paste_error@localhost
    -#app_email_from = kallithea-noreply@localhost
    +email_to = {email}
    +error_email_from = {email}
    +app_email_from = {email}
     #error_message =
     #email_prefix = [Kallithea]
     
    -#smtp_server = mail.server.com
    -#smtp_username =
    -#smtp_password =
    -#smtp_port =
    -#smtp_use_tls = false
    +smtp_server = {smtp_server}
    +smtp_username = {smtp_username}
    +smtp_password = {smtp_password}
    +smtp_port = 25
    +smtp_use_tls = true
     #smtp_use_ssl = true
     ## Specify available auth parameters here (e.g. LOGIN PLAIN CRAM-MD5, etc.)
    -#smtp_auth =
    +smtp_auth = LOGIN PLAIN
    +
    +## SSH key settings
    +ssh_username = git
    +authorized_keys = /home/git/.ssh/authorized_keys
    +paster_path = /usr/local/kallithea/venv/bin/paster
     
     [server:main]
     ## PASTE ##
    @@ -251,7 +252,7 @@
     ## a prefix key for this instance used for cache invalidation when running
     ## multiple instances of kallithea, make sure it's globally unique for
     ## all running kallithea instances. Leave empty if you don't use it
    -instance_id =
    +instance_id = *
     
     ## alternative return HTTP header for failed authentication. Default HTTP
     ## response is 401 HTTPUnauthorized. Currently Mercurial clients have trouble with
   path: /usr/local/kallithea/my.ini.patch
 - content: |
    --- /etc/default/jenkins.old        2015-06-25 05:52:31.387875040 +0000
    +++ /etc/default/jenkins    2015-06-25 05:52:55.067875040 +0000
    @@ -54,10 +54,10 @@
     # UMASK=027
     
     # port for HTTP connector (default 8080; disable with -1)
    -HTTP_PORT=8080
    +HTTP_PORT=-1
     
     # port for AJP connector (disabled by default)
    -AJP_PORT=-1
    +AJP_PORT=8102
     
     # servlet context, important if you want to use apache proxying  
     PREFIX=/$NAME
     @@ -72,4 +72,4 @@
      # --webroot=~/.jenkins/war
      # --prefix=$PREFIX
      
     -JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpPort=$HTTP_PORT --ajp13Port=$AJP_PORT"
     +JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpPort=$HTTP_PORT --ajp13Port=$AJP_PORT --prefix=/jenkins"
   path: /etc/default/jenkins.patch
 - content: |
    #!/bin/bash
    set -x
    set -e
    wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | apt-key add -
    sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list'
    apt-get update
    apt-get install jenkins --assume-yes
    patch /etc/default/jenkins < /etc/default/jenkins.patch
   path: /usr/local/bin/install-jenkins
   permissions: '0755'
 - content: |
    #!/bin/bash
    set -x
    set -e
    service jenkins start
   path: /usr/local/bin/start-jenkins
   permissions: '0755'
 - content: |
    <VirtualHost *:80>
    # Redirect HTTP connections to HTTPS
    <IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{{HTTPS}} off
    RewriteRule (.*) https://%{{HTTP_HOST}}%{{REQUEST_URI}} [R=301,L]
    </IfModule>
    Header always append X-Frame-Options SAMEORIGIN
    </VirtualHost>
    <IfModule mod_ssl.c>
           <VirtualHost _default_:443>
                ServerAdmin {email}
    
                DocumentRoot /var/www/html
                Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
                Header always set X-Frame-Options SAMEORIGIN
                Header always set X-XSS-Protection "1; mode=block"
                Header always set X-Content-Type-Options nosniff
                Header always set X-Permitted-Cross-Domain-Policies master-only
                Header always set Content-Security-Policy "default-src 'self'"

                <Directory /var/www/html>
                Order allow,deny
                Allow from all
                </Directory>
    
                <Location /kallithea>
                Header always set Content-Security-Policy "default-src 'self' script-src 'unsafe-inline'"
                </Location>

                WSGIScriptAlias /kallithea /usr/local/kallithea/wsgi/kallithea.py
                WSGIDaemonProcess kallithea user=git group=git processes=10 threads=1
                WSGIProcessGroup kallithea
    
                <Directory /usr/local/kallithea/wsgi>
                Require all granted
                </Directory>
   
                AllowEncodedSlashes NoDecode
                
                <Location /jenkins>
                Header always set Content-Security-Policy "default-src 'self' script-src 'unsafe-inline'"
                ProxyPass ajp://127.0.0.1:8102/jenkins nocanon
                ProxyPassReverse ajp://127.0.0.1:8102/jenkins
                RequestHeader set X-Forwarded-Proto "https"
                RequestHeader set X-Forwarded-Port "443"
                </Location>
                
                # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
                # error, crit, alert, emerg.
                # It is also possible to configure the loglevel for particular
                # modules, e.g.
                #LogLevel info ssl:warn
   
                ErrorLog ${{APACHE_LOG_DIR}}/error.log
                CustomLog ${{APACHE_LOG_DIR}}/access.log combined
   
                SSLEngine on
   
                #   A self-signed (snakeoil) certificate can be created by installing
                #   the ssl-cert package. See
                #   /usr/share/doc/apache2/README.Debian.gz for more info.
                #   If both key and certificate are stored in the same file, only the
                #   SSLCertificateFile directive is needed.
                SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem
                SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
    
                #   Server Certificate Chain:
                #   Point SSLCertificateChainFile at a file containing the
                #   concatenation of PEM encoded CA certificates which form the
                #   certificate chain for the server certificate. Alternatively
                #   the referenced file can be the same as SSLCertificateFile
                #   when the CA certificates are directly appended to the server
                #   certificate for convinience.
                #SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt
       </VirtualHost>
    </IfModule>
   path: /etc/apache2/sites-available/kallithea.conf
   permissions: '0755'
 - content: |
    activate_this = '/usr/local/kallithea/venv/bin/activate_this.py'
    execfile(activate_this,dict(__file__=activate_this))
    
    import os
    os.environ['HOME'] = '/home/git'
    
    ini = '/usr/local/kallithea/db/my.ini'
    from paste.script.util.logging_config import fileConfig
    fileConfig(ini)
    from paste.deploy import loadapp
    application = loadapp('config:' + ini)
   path: /usr/local/kallithea/wsgi/kallithea.py
   permissions: '0755'

# Add users to the system. Users are added after groups are added.
users:
  - default
  - name: git
    gecos: GIT login account and runtime account for kallithea

runcmd:
 - set -x
 - set -e
 - [ blockdev, --setra, {readahead}, /dev/vda]
 - [ a2enmod, wsgi ]
 - [ a2enmod, ssl ]
 - [ a2enmod, rewrite ]
 - [ a2enmod, headers ]
 - [ a2enmod, proxy_ajp ]
 - [ a2dissite, 000-default ]
 - [ a2dissite, default-ssl ]
 - [ a2ensite, kallithea ]
 - [ /usr/local/bin/install-kallithea ]
 - [ /usr/local/bin/install-jenkins ]
 - [ su, git, -l, -c, /usr/local/bin/build-kallithea]
 - [ /usr/local/bin/configure-kallithea]
 - [ su, git, -l, -c, /usr/local/bin/provision-kallithea]
 - [ /usr/local/bin/start-jenkins ]
 - [ service, apache2, reload ]
