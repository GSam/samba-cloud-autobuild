#!/usr/bin/python
import sys
import argparse
import os
import subprocess

from common import HERE, YAML_DIR, get_credentials, quote, sanitise_hostname
from common import get_package_list, add_common_args, process_common_args

YAML_SINGLE = os.path.join(YAML_DIR, 'heat-single.yaml')


def construct_parameters(args, credentials):
    """From command line arguments (or similar namespace object),
    create a parameter string to populate a heat template"""

    if 'centos' in args.image:
        user = 'centos'
        package_list = get_package_list('centos6', form=list)
    else:
        user = 'ubuntu'
        package_list = get_package_list('ubuntu', form=list)

    parameters = [(k.lower(), v) for k, v in credentials.items()]
    arg_d = vars(args)
    parameters.extend([(k, str(arg_d[k])) for k in ('remote',
                                                    'branch',
                                                    'flavor',
                                                    'image',
                                                    'key_name',
                                                    'servers_per_subnet',
                                                    'subnet_count',
                                                    'use_samba_kcc',
                                                    'kcc_interval',
                                                    'has_rodc')
                       if arg_d[k] is not None])

    parameters.extend([('user', user),
                       ('package_list', ','.join(package_list))])

    #print parameters
    return ';'.join("%s=%s" % (k, quote(v)) for k, v in sorted(parameters))


def run(template_name, stack_id, parameters, credentials, dry_run=False,
        verbose=False):
    cmd = ["heat"]
    if verbose:
        cmd += ['-d', '-v']
    cmd += ["stack-create",
           "-e", os.path.join(HERE, "env.yaml"),
           "--template-file", template_name,
           "--parameters", parameters, stack_id]

    if dry_run:
        print ' '.join(quote(x) for x in cmd)
    else:
        try:
            subprocess.check_call(cmd, env=credentials)
        except subprocess.CalledProcessError:
            print >> sys.stderr, "The command failed:"
            print >> sys.stderr, ' '.join(quote(x) for x in cmd)

def print_template_list():
    files = os.listdir(os.path.join(HERE, 'yaml'))
    for f in files:
        if f.endswith('.yaml'):
            print "yaml/%s" % (f,)


def main():
    parser = argparse.ArgumentParser()
    add_common_args(parser)
    parser.add_argument('--stack-id', default=None,
                        help="use this stack ID (default: auto)")
    parser.add_argument('--template', default='yaml/multi-dc-top-level.yaml',
                        help="use this yaml template")
    parser.add_argument('--template-list', action='store_true',
                        help="list known templates")
    parser.add_argument('--give-template-credentials', action='store_true',
                        help="provide openstack crednetials to template (for self shutdown)")
    parser.add_argument('--subnet-count', type=int, default=1,
                        help="create this many subnets")
    parser.add_argument('--servers-per-subnet', type=int, default=1,
                        help="create this many servers in each subnet")
    parser.add_argument('--no-samba-kcc', action='store_false',
                        dest='use_samba_kcc', default=True,
                        help="Use the old KCC, not samba_kcc")
    parser.add_argument('--kcc-interval', type=int,
                        help="set the interval between KCC runs")
    parser.add_argument('--has-rodc', action='store_true',
                        help="the first DC will be read-only")

    args = parser.parse_args()
    if args.template_list:
        print_template_list()
        sys.exit()

    process_common_args(args)

    if args.stack_id is None:
        stack_id = "%s-%s" % (os.environ.get('USER')[:3],
                              args.branch[:3])
        if args.no_secrets:
            stack_id += '-no-secrets'
    else:
        stack_id = args.stack_id

    args.stack_id = sanitise_hostname(stack_id)

    credentials = get_credentials(args.region, no_secrets=args.no_secrets)
    if args.give_template_credentials:
        parameters = construct_parameters(args, credentials)
    else:
        parameters = construct_parameters(args, {})

    run(args.template, args.stack_id, parameters, credentials,
        args.dry_run, args.verbose)


main()
