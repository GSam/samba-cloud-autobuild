#!/usr/bin/python
import sys
import argparse
import os
import subprocess

from common import HERE, YAML_DIR, get_credentials, quote, sanitise_hostname
from common import get_package_list, add_common_args, process_common_args


def construct_parameters(args, credentials):
    """From command line arguments (or similar namespace object),
    create a parameter string to populate a heat template"""

    user = 'ubuntu'
    package_list = get_package_list('ubuntu', form=list)

    parameters = [(k.lower(), v) for k, v in credentials.items()]
    arg_d = vars(args)
    parameters.extend([(k, str(arg_d[k])) for k in ('remote',
                                                    'branch',
                                                    'flavor',
                                                    'key_name')
                       if arg_d[k] is not None])

    parameters.extend([#('user', user),
                       ('package_list', ','.join(package_list))])

    #print parameters
    return ';'.join("%s=%s" % (k, quote(v)) for k, v in sorted(parameters))


def run(stack_id, parameters, credentials, dry_run=False,
        verbose=False):
    cmd = ["heat"]
    if verbose:
        cmd += ['-d', '-v']
    cmd += ["stack-create",
            "--template-file", 'yaml/rodc-test-site.yaml',
           "--parameters", parameters, stack_id]

    if dry_run:
        print ' '.join(quote(x) for x in cmd)
    else:
        try:
            subprocess.check_call(cmd, env=credentials)
        except subprocess.CalledProcessError, e:
            print >> sys.stderr, "The command failed:"
            print >> sys.stderr, ' '.join(quote(x) for x in cmd)
            print >> sys.stderr, e


def main():
    parser = argparse.ArgumentParser()
    add_common_args(parser)
    parser.add_argument('--stack-id', default=None,
                        help="use this stack ID (default: auto)")
    parser.add_argument('--give-template-credentials', action='store_true',
                        help=("provide openstack credentials to template "
                              "(for self shutdown)"))
    
    args = parser.parse_args()
    process_common_args(args)

    if args.stack_id is None:
        stack_id = "%s-%s" % (os.environ.get('USER')[:3],
                              args.branch[:3])
        if args.no_secrets:
            stack_id += '-no-secrets'
    else:
        stack_id = args.stack_id

    stack_id = sanitise_hostname(stack_id)

    credentials = get_credentials(args.region, no_secrets=args.no_secrets)

    if args.give_template_credentials:
        parameters = construct_parameters(args, credentials)
    else:
        parameters = construct_parameters(args, {})

    run(stack_id, parameters, credentials,
        args.dry_run, args.verbose)


main()
