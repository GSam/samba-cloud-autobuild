---
# A generic role to create a accessable server
- name: verify authentication
  os_auth:

- name: import ssh keypair {{ OS_KEYPAIR_NAME }}
  os_keypair:
    name: "{{ OS_KEYPAIR_NAME }}"
    public_key_file: "{{ OS_PUBLIC_KEY_FILE }}"

- name: create network {{ OS_NETWORK_NAME }}
  os_network:
    name: "{{ OS_NETWORK_NAME }}"
  register: os_network_result

- name: set fact for OS_NETWORK_ID which may be used by packer
  set_fact:
    OS_NETWORK_ID: "{{os_network_result.network.id}}"

- name: create subnet {{ OS_SUBNET_NAME }} with cidr {{ OS_SUBNET_CIDR }}
  os_subnet:
    name: "{{ OS_SUBNET_NAME }}"
    network_name: "{{ OS_NETWORK_NAME }}"
    cidr: "{{ OS_SUBNET_CIDR }}"
    dns_nameservers: "{{ OS_NAMESERVERS }}"

- name: create public-net router {{ OS_ROUTER_NAME }}
  os_router:
    name: "{{ OS_ROUTER_NAME }}"
    network: public-net
    interfaces:
      - "{{ OS_SUBNET_NAME }}"
  when: OS_AUTO_FLOATING_IP

- name: include tasks to create security groups
  include_tasks: security_groups.yml
  vars:
    name: "{{item.key}}"
    rules: "{{item.value}}"
  with_dict: "{{security_groups}}"
  when: security_groups is defined
  tags:
    - security_groups

- name: create server instances via OS_SERVER_ITEMS
  os_server: "{{item}}"
  register: os_server_task
  loop: "{{OS_SERVER_ITEMS}}"
  when: OS_SERVER_ITEMS is defined

- name: create server instances
  os_server:
    name: "{{ item.name|default('%s%d'|format(OS_SERVER_PREFIX, index)) }}"
    flavor: "{{ item.flavor|default(OS_FLAVOR_NAME) }}"
    image: "{{ item.image|default(OS_IMAGE_NAME) }}"
    boot_from_volume: "{{ item.boot_from_volume|default('windows' in OS_IMAGE_NAME|lower) }}"
    volume_size: "{{ item.volume_size|default('windows' in OS_IMAGE_NAME|lower and 100 or 0) }}"
    terminate_volume: "{{ item.terminate_volume|default('yes') }}"
    key_name: "{{ item.keypair|default(OS_KEYPAIR_NAME) }}"
    network: "{{ OS_NETWORK_NAME }}"
    auto_floating_ip: "{{ item.auto_floating_ip|default(OS_AUTO_FLOATING_IP) }}"
    userdata: "{{lookup('template', item.userdata|default(OS_USERDATA_FILE))}}"
    meta:
      group: "{{ ENV_NAME }}"
      groups: "{{ item.groups|default(OS_META_GROUPS)|join(',') }}"
      cloud: openstack  #  will create hosts group meta-cloud_openstack
      index: "{{index|string}}"
    security_groups: "{{item.security_groups|default(OS_SECURITY_GROUPS)}}"
    wait: yes
  async: 180
  poll: 0
  loop: "{{OS_SERVERS}}"
  loop_control:
    index_var: index
  register: os_server_loop
  when:
    - OS_SERVERS is defined
    - OS_SERVERS|length > 0

- name: wait for instance creation to be complete
  async_status:
    jid: "{{item.ansible_job_id}}"
    mode: status
  until: os_server_jobs.finished
  retries: 100
  loop: "{{os_server_loop.results}}"
  register: os_server_jobs
  when:
    - OS_SERVERS is defined
    - OS_SERVERS|length > 0

- name: refresh in-memory openstack dynamic inventory
  meta: refresh_inventory
  when:
    - OS_SERVERS is defined
    - OS_SERVERS|length > 0

- name: refresh cached openstack dynamic inventory
  command: "{{item}} --refresh --list"
  with_items:
    -  "{{lookup('config', 'DEFAULT_HOST_LIST')}}"
  when:
    - OS_SERVERS is defined
    - OS_SERVERS|length > 0
