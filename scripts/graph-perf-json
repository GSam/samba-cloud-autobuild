#!/usr/bin/python
"""Plot the results of multi-perf-test"""

import json
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import cm
import argparse
import re

matplotlib.rcParams.update({'font.size': 10,
                            'savefig.facecolor': '#ffffff',
                            'savefig.edgecolor': '#ffffff',
                            'figure.autolayout': True,

})


def find_spaced_label_locations(locations, max_value):
    locations.sort(reverse=True)
    top = (locations[0][0] + max_value) * 0.5
    bottom = locations[-1][0] * 0.5

    min_spacing = (2 * top - bottom) / (len(locations) * 3.0 + 2)
    top += min_spacing
    bottom -= min_spacing
    if bottom < min_spacing:
        bottom = min_spacing

    for j in range(100):
        max_overlap = 0
        for i in range(len(locations) - 1):
            a = locations[i][0]
            b = locations[i + 1][0]
            gap = a - b
            if gap < min_spacing:
                step = min_spacing - gap
                if a < top:
                    locations[i][0] += step
                if b > bottom:
                    locations[i + 1][0] -= step
                max_overlap = max(step, max_overlap)

        if max_overlap < 1e-6:
            break

    return {k: v for v, k in locations}


def always(x):
    return True


def get_sequences(input_files, filter_re, absolute_times=False,
                  norm_index=0,
                  tidy_names=True):
    data = {}
    for fn in input_files:
        f = open(fn)
        d = json.load(f)
        f.close()
        if tidy_names:
            _d = {}
            for k, v in d.items():
                _k = re.sub(r'(remotes/)?(origin/)?', '', k)
                _d[_k] = {}
                for test, time in v.items():
                    test = test[:test.rindex('(')][test.rindex('.') + 1:]
                    _d[_k][test] = time
            d = _d
        data.update(d)

    sequence_names = set()
    for v in data.values():
        sequence_names.update(v.keys())

    # XXX this works with samba-v4-* tags, not with random hashes!
    x_labels = sorted(data)

    if filter_re is not None:
        accept = re.compile(filter_re).search
    else:
        accept = always

    sequences = {k: [] for k in sequence_names if accept(k)}
    for branch in x_labels:
        tests = data[branch]
        for k, seq in sequences.items():
            v = tests.get(k, None)
            seq.append(v)


    last_points = {}
    label_locations = []
    max_value = 0.0
    for test, series in sequences.items():
        for i in range(len(series) - 1, -1, -1):
            v = series[i]
            if v is not None:
                last_val = v
                break
        else:
            print >> sys.stderr, "no values for %s; removing it" % test
            del sequences[test]
            continue

        if not absolute_times:
            for v in series[norm_index:]:
                if v is not None:
                    break
            first_val = v
            scale = 1.0 / (first_val or 1.0)
            series[:] = [(x * scale if x is not None else None)
                         for x in series]

            last_val *= scale

        last_points[test] = (i, last_val)
        label_locations.append([last_val, test])

        max_value = max(max(series), max_value)

    location_map = find_spaced_label_locations(label_locations, max_value)

    return x_labels, sequences, location_map, last_points


def main():
    parser = argparse.ArgumentParser(description=__doc__,
                    formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-i', '--input-file', action='append',
                        help="read JSON form here")
    parser.add_argument('-o', '--output', default=None,
                        help="write graph here")
    parser.add_argument('-t', '--tidy-names', action='store_true',
                        help="try to remove cruft from test/branch names")
    parser.add_argument('-a', '--absolute-times', action='store_true',
                        help="show absolute times, not relative times")
    parser.add_argument('--norm-index', default=0, type=int,
                        help="normalise to this revision (default 0 == first)")
    parser.add_argument('-f', '--filter-tests',
                        help="only allow tests matching this regex")
    parser.add_argument('--log-scale', action='store_true',
                        help="plot the Y axis in log scale")

    args = parser.parse_args()

    xlabels, sequences, location_map, last_points = get_sequences(args.input_file,
                                                                  args.filter_tests,
                                                                  args.absolute_times,
                                                                  args.norm_index,
                                                                  args.tidy_names)

    if args.log_scale:
        plot = plt.semilogy
    else:
        plot = plt.plot

    fig = plt.figure()

    scale = 1.0 / len(sequences)
    colours = set(cm.brg(x * scale) for x in range(len(sequences)))

    for test, colour in zip(sequences, colours):
        seq = sequences[test]
        loc = location_map[test]
        last_point = last_points[test]
        plot(seq, '-', color=colour)
        plot(seq, '.', color=colour)
        plt.annotate(test, last_point,
                     (len(seq) - 0.5, loc),
                     arrowprops={'color': '#666666',
                                 'arrowstyle': "->",
                                 'relpos': (0.0, 0.5),
                     },
                     color=colour,
        )

    plt.grid(True)
    plot([len(xlabels)], [0])

    plt.xticks(range(len(xlabels)), xlabels)
    plt.margins(x=0.1)
    ax = fig.axes[0]
    ax.set_xlim([-0.25, len(xlabels) * 3 // 2])

    if not args.output:
        plt.show()
    else:
        fig.set_size_inches(10, 10)
        plt.savefig(args.output,
                    dpi=100,
                    frameon=True,
                    pad_inches=1,
                    facecolor='#ffffff',
                    edgecolor='#ffffff')


main()
