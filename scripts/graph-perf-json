#!/usr/bin/python
"""Plot the results of multi-perf-test"""

import json
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import cm
import argparse
import re

matplotlib.rcParams.update({'font.size': 10,
                            'figure.facecolor': '#ffffff',
})



def main():
    parser = argparse.ArgumentParser(description=__doc__,
                    formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-i', '--input-file',
                        help="read JSON form here")
    parser.add_argument('-o', '--output', default=None,
                        help="write graph here")
    parser.add_argument('-t', '--tidy-names', action='store_true',
                        help="try to remove cruft from test/branch names")
    parser.add_argument('-a', '--absolute-times', action='store_true',
                        help="show absolute times, not relative times")
    parser.add_argument('-f', '--filter-tests',
                        help="only allow tests matching this regex")

    args = parser.parse_args()
    f = open(args.input_file)
    d = json.load(f)
    f.close()
    sequences = {}
    for branch, tests in d.items():
        for k, v in tests.items():
            sequences.setdefault(k, []).append((branch, v))

    if args.filter_tests is not None:
        accept = re.compile(args.filter_tests).search
        for k in sequences.keys():
            if not accept(k):
                del sequences[k]

    for series in sequences.values():
        series.sort()
        if not args.absolute_times:
            scale = 1.0 / (series[0][1] or 1.0)
            series[:] = [(k, v * scale) for k, v in series]


    labels = []
    fig = plt.figure()

    items = sequences.items()
    items.sort(key=lambda x: x[1][-1], reverse=True)

    scale = 1.0 / len(items)
    colours = set(cm.brg(x * scale) for x in range(len(items)))

    #print items
    locations = [x[1][-1][1] for x in items]
    print locations
    min_spacing = (locations[0] - locations[-1]) / (len(locations) * 2.0)
    print min_spacing
    location_top = locations[0] + min_spacing
    location_bottom = locations[-1] - min_spacing
    for j in range(100):
        max_overlap = 0
        for i in range(len(locations) - 1):
            # locations is in descending order
            gap = locations[i] - locations[i + 1]
            if gap < min_spacing:
                step = min_spacing - gap
                if locations[i] < location_top:
                    locations[i] += step
                if locations[i + 1] > location_bottom:
                    locations[i + 1] -= step
                max_overlap = max(step, max_overlap)
        locations.sort(reverse=True)
        print j, max_overlap
        if max_overlap < 1e-6:
            break

    for x, loc, colour in zip(items, locations, colours):
        test, seq = x
        plt.plot([x[1] for x in seq], '-', color=colour)
        plt.plot([x[1] for x in seq], '.', color=colour)
        if args.tidy_names:
            test = test[:test.rindex('(')][test.rindex('.') + 1:]
        labels.append(test)
        if False:
            plt.text(len(seq) - 1, seq[-1][1], test)
        else:
            plt.annotate(test, (len(seq) - 1, seq[-1][1]),
                         (len(seq) - 0.5, loc),
                         arrowprops={'color': '#666666',
                                     'arrowstyle': "->",
                                     'relpos': (0.0, 0.5),
                         },
                         color=colour,
                         )

    plt.grid(True)
    plt.plot([len(seq) + 1], [0])

    xlabels = [x[0] for x in seq]
    if args.tidy_names:
        xlabels = [re.sub(r'(remotes/)?(origin/)?', '', x) for x in xlabels]

    plt.xticks(range(len(seq) + 1), xlabels + [''])
    plt.margins(x=0.1)

    ax = fig.axes[0]
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.spines['bottom'].set_visible(False)

    #plt.legend(labels, loc='lower left', frameon=False, borderpad=0, fontsize=9)
    fig.patch.set_visible(False)
    if not args.output:
        plt.show()
    else:
        plt.savefig(args.output, dpi=150, transparent=True,
                    frameon=True,
                    facecolor=fig.get_facecolor(), edgecolor='none')


main()
