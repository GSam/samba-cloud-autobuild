#!/usr/bin/python
#based on an email from Joe
import matplotlib.pyplot as plt
from hashlib import sha1
import numpy as np

results = {
    'metze lmdb': '''
 r\S         1        2        3        4        5        6        7        8        9       10       11       12
  1          0        0        0        0        0        0        0        0        0        0        0        0
  2          0        0        0        0        0        0        0        0        0        0        0        0
  3          0        0        0        0        0        0        0        0        0        0        0        0
  4          0        0        0   41.500   49.920   60.505   71.904   82.306   88.818   92.108   97.737        0
  5          0        0        0   50.826   61.666   73.555   78.560   85.326   96.618  105.643  105.788        0
  6          0        0        0   61.690   77.126   83.261   90.495  101.572  101.589   95.307  104.340        0
  7          0        0        0   75.903   66.315   91.912  102.188  107.380  112.907  102.057  105.927        0
  8          0        0        0   79.314   91.225   92.837  100.272  103.324  114.537  107.632   95.885        0
  9          0        0        0   88.732  106.105  108.062  106.598  102.846  109.440  105.508  103.133        0
 10          0        0        0  105.399  112.790  118.182  122.781  120.032  124.794  118.779  106.048        0
 11          0        0        0  106.506  107.404  101.974   95.843  106.068  107.123  116.111   93.920        0
 12          0        0        0  102.183  112.785  111.602  120.868  125.455  123.573  114.574  122.658        0
 13          0        0        0  118.938  107.596   80.075  119.019  114.389  116.111  113.056  116.987        0
 14          0        0        0  104.792  100.931   19.004  110.423  124.053  101.810  117.015  124.960        0
 15          0        0        0  121.707  109.724  113.472  124.921  127.075  117.865  120.893  107.083        0
 16          0        0        0  140.172  141.961  132.248  141.295  140.722  144.381  136.247  132.452        0
 17          0        0        0  160.095  155.573  165.428  162.899  144.628  155.613  150.818  133.884        0
 18          0        0        0  122.939  104.896  114.760  126.131  116.288  120.794  122.241  117.317        0
 19          0        0        0  127.706  125.558  139.885  134.078  137.301  136.676  124.412  123.001        0
 20          0        0        0  130.321  135.464  144.009  126.692  147.900  133.300  120.658  115.100        0
 21          0        0        0  131.667  122.350  135.096  146.961  154.367  149.734  128.683  131.608        0
 22          0        0        0  144.664  136.841  129.199  142.176  153.926  141.172  122.289  113.799        0
 23          0        0        0  146.478  149.614  138.653  145.362  141.415  141.297  123.970  107.634        0
 24          0        0        0  154.778  142.671  151.207  164.910  167.014  164.177  153.324  122.174        0
 25          0        0        0        0        0        0        0        0        0        0        0        0
    ''',
    'tim pso v2': """
 r\S         1        2        3        4        5        6        7        8        9       10       11       12
  1          0        0        0        0        0        0        0        0        0        0        0        0
  2          0        0        0        0        0        0        0        0        0        0        0        0
  3          0        0        0        0        0        0        0        0        0        0        0        0
  4          0        0        0   37.082   44.801   60.532   75.801   78.271   85.944   94.047   72.176        0
  5          0        0        0   51.301   53.488   69.328   88.031   88.716  102.762   85.978  105.050        0
  6          0        0        0   64.065   75.319   82.956   78.176   87.288   97.091  102.148   94.212        0
  7          0        0        0   80.730   86.159   63.797  104.860   92.028   94.112   95.093   99.183        0
  8          0        0        0   69.466   92.338  100.678  105.719  103.304  106.430  100.039  120.579        0
  9          0        0        0   74.105   96.505  102.198  105.541  101.393  105.277  105.227   99.546        0
 10          0        0        0   82.970  105.056  104.515  112.601  111.285  102.560  125.895   84.467        0
 11          0        0        0   82.960   94.571  121.788  107.127  114.524  108.854   86.997   94.095        0
 12          0        0        0  107.628  108.813  104.073  107.400  112.092  108.973  111.526  130.635        0
 13          0        0        0  106.603  116.545  133.409  108.048  120.586  118.293  106.397  114.992        0
 14          0        0        0   92.186  125.236  114.379  116.258  108.284  126.504  121.857  109.804        0
 15          0        0        0  121.878   91.061  119.415  119.071  137.940  125.527  125.222  116.084        0
 16          0        0        0  110.470  124.373  128.996  127.525  122.629  114.367  128.881  104.336        0
 17          0        0        0  102.250  121.519  124.631  110.705  120.954  123.130  120.790  105.637        0
 18          0        0        0  113.602  122.945  145.161  129.442  109.787  124.186  128.351   88.409        0
 19          0        0        0  114.550  128.081  130.861  115.099  113.682  132.216  106.412  127.463        0
 20          0        0        0  123.626  144.265  135.671  114.912  108.446  133.620  122.962  107.425        0
 21          0        0        0  121.589  129.178  127.850  134.807  130.465  119.445  104.781  100.038        0
 22          0        0        0  118.867  131.164  132.138  132.204  143.113  132.713  113.063   78.803        0
 23          0        0        0  112.510  138.238  125.054  118.633  144.708  125.383  113.182   95.404        0
 24          0        0        0  130.914  131.791  132.258  159.547  151.920  131.703  123.747  101.755        0
 25          0        0        0        0        0        0        0        0        0        0        0        0
    """,
    'tim pso v1': """
>>>>  r\S         1        2        3        4        5        6        7        8        9       10       11       12
>>>>   1          0        0        0        0        0        0        0        0        0        0        0        0
>>>>   2          0        0        0        0        0        0        0        0        0        0        0        0
>>>>   3          0        0        0        0        0        0        0        0        0        0        0        0
>>>>   4          0        0        0   37.640   55.192   52.049   66.739   63.518   69.398   86.641   82.049        0
>>>>   5          0        0        0   48.047   60.055   70.487   74.940   72.498   70.202   97.947   99.643        0
>>>>   6          0        0        0   55.140   70.333   82.655   84.441   92.260   80.312  115.030   99.515        0
>>>>   7          0        0        0   74.438   86.893   97.487  100.616   98.608   71.773   86.354  109.202        0
>>>>   8          0        0        0   78.898   92.836  111.368   99.777   98.944   89.442   96.071   78.242        0
>>>>   9          0        0        0   87.470   94.161  110.414  105.972  115.760   90.316   85.671   86.597        0
>>>>  10          0        0        0   87.434   55.924  114.116  104.419  110.603   94.349  108.116  113.633        0
>>>>  11          0        0        0   96.583  111.139   91.252  115.436  110.977   93.257   94.942  111.828        0
>>>>  12          0        0        0  105.925  114.167  116.194  124.681  118.198  102.879  120.741  102.004        0
>>>>  13          0        0        0  108.270  115.788  115.467   99.385  120.024  113.897  111.195  128.231        0
>>>>  14          0        0        0  102.137  121.884  109.046  135.819  111.838   94.954  110.020  118.498        0
>>>>  15          0        0        0  127.509  136.431  126.744  114.100  121.091  113.135  120.402  114.367        0
>>>>  16          0        0        0  120.966  141.463  123.091  121.224  116.167  113.556  106.194  113.421        0
>>>>  17          0        0        0  132.528  124.961  117.453  120.241  119.962  109.551  143.465  118.850        0
>>>>  18          0        0        0  103.470  101.866  114.524  115.130  126.133   60.263  126.443  107.731        0
>>>>  19          0        0        0  121.166  122.071  139.726  127.497  144.423  118.111  127.632  125.059        0
>>>>  20          0        0        0  135.826  135.446  144.073  120.870  137.250  112.885  123.047   90.222        0
>>>>  21          0        0        0  131.822  123.537  134.439  134.838  138.547  127.177  109.355   94.261        0
>>>>  22          0        0        0  130.700  126.817  117.283 *160.052  153.121  133.673  100.860  112.662        0
>>>>  23          0        0        0  125.088  130.050  148.148  143.235  127.453  119.559   99.157   97.740        0
>>>>  24          0        0        0  120.754  129.787  141.368  131.238  129.614  126.973  120.354   94.506        0
>>>>  25          0        0        0        0        0        0        0        0        0        0        0        0
    """,
    'pre-pso': """
>>>>  r\S         1        2        3        4        5        6        7        8        9       10       11       12
>>>>   1          0        0        0        0        0        0        0        0        0        0        0        0
>>>>   2          0        0        0        0        0        0        0        0        0        0        0        0
>>>>   3          0        0        0        0        0        0        0        0        0        0        0        0
>>>>   4          0        0        0   41.119   56.732   66.447   72.572   76.956   95.436  102.396  110.454        0
>>>>   5          0        0        0   49.145   70.014   74.849   84.013   89.707  107.108  116.287  103.106        0
>>>>   6          0        0        0   68.731   78.698   93.159   95.705  115.973  114.349  112.678  130.282        0
>>>>   7          0        0        0   71.490   85.902  108.542  108.586  113.590  126.788  119.140  101.968        0
>>>>   8          0        0        0   84.228  103.297  112.420  108.141  112.146  125.492  109.455  101.155        0
>>>>   9          0        0        0   88.669  111.279  121.480  121.692  138.248  115.464  131.850   98.632        0
>>>>  10          0        0        0  107.833  115.134  126.926  132.568  116.088  136.371   97.090  126.787        0
>>>>  11          0        0        0  114.108  111.883  126.213  139.040  141.352  106.134  124.904  118.583        0
>>>>  12          0        0        0  109.988  120.804  142.387  133.999  124.241  131.333  107.382  111.447        0
>>>>  13          0        0        0  133.787  115.635  135.760  144.311  113.029  109.257  124.848  135.680        0
>>>>  14          0        0        0  142.868  118.900  139.201  131.333  132.071  113.330  116.351  118.728        0
>>>>  15          0        0        0  124.355  132.024  146.237  130.092  107.181  125.418  121.196  126.104        0
>>>>  16          0        0        0  123.211  140.214  135.858  109.205  146.865  137.027  111.136  121.051        0
>>>>  17          0        0        0  120.864  149.945  116.799  147.768  119.295  126.733  119.915  107.164        0
>>>>  18          0        0        0  140.311  138.099  108.622  126.043  127.352  143.128  134.762   93.017        0
>>>>  19          0        0        0  145.346  133.715  120.586  139.703  120.015  118.425   83.349  106.214        0
>>>>  20          0        0        0  144.652  130.634  110.613  123.414  151.610  135.753   93.042   85.515        0
>>>>  21          0        0        0  131.350  122.082  121.926  146.542  132.719  126.720  120.016   91.363        0
>>>>  22          0        0        0  140.259  146.325  129.648  142.637  142.712  132.569  124.193   84.189        0
>>>>  23          0        0        0 *169.764  139.553   91.046  137.663  159.753  138.276  102.191  110.595        0
>>>>  24          0        0        0  148.510  142.059  141.010  137.082   98.231   96.259  109.009   69.462        0
>>>>  25          0        0        0        0        0        0        0        0        0        0        0        0
    """,
    'windows': """
>>>> r\S        1        2        3        4        5        6        7        8        9       10       11       12
>>>>  1         0        0        0        0        0        0        0        0        0        0        0        0
>>>>  2         0        0        0        0        0        0        0        0        0        0        0        0
>>>>  3         0        0        0        0        0        0        0        0        0        0        0        0
>>>>  4         0        0        0   37.499   51.081   47.946   78.658   73.416   92.505   95.842  100.820        0
>>>>  5         0        0        0   55.603   57.470   74.442   86.191  113.089  111.861  115.396  142.818        0
>>>>  6         0        0        0   58.732   85.243   92.833  102.397  108.455  136.802  134.110  136.791        0
>>>>  7         0        0        0   66.669   91.372  100.347  132.541  159.121  137.524  166.432  131.660        0
>>>>  8         0        0        0   76.959  113.768  130.787  148.635  140.318  155.053  185.398  172.079        0
>>>>  9         0        0        0  104.442  124.219  135.548  156.073  159.233  161.505  165.132  111.609        0
>>>> 10         0        0        0  121.444  128.814  170.306  172.741  173.592  155.078  137.541  160.373        0
>>>> 11         0        0        0  119.806  147.530  171.919  175.189  156.816  189.379  176.344  155.873        0
>>>> 12         0        0        0  103.682  145.108  174.202  172.044  206.165  129.995  157.405  150.218        0
>>>> 13         0        0        0  151.011  151.274  172.072  189.949  161.779  176.042  137.990  140.948        0
>>>> 14         0        0        0  146.589  166.755  213.144  189.248  166.505  145.031  138.344  150.909        0
>>>> 15         0        0        0  149.442  190.469  200.051  160.482  143.324  151.437  141.908  130.576        0
>>>> 16         0        0        0  173.891  202.137  204.066  172.500  176.371  166.698  127.024  141.724        0
>>>> 17         0        0        0  170.829  180.184  196.766  181.791  147.663  155.474   99.551  127.230        0
>>>> 18         0        0        0  188.009  191.858  155.009  172.549  147.957  152.508  124.296  129.689        0
>>>> 19         0        0        0  201.694  225.261  190.230  157.619  152.969  136.545  130.671  125.775        0
>>>> 20         0        0        0  203.151  209.354  165.844  166.927  141.296  140.057  139.265  125.006        0
>>>> 21         0        0        0  212.496  217.526  171.679  168.568  168.101  145.787  111.281  106.252        0
>>>> 22         0        0        0  184.216 *235.421  180.842  156.551  158.798  149.434  115.148  113.642        0
>>>> 23         0        0        0  201.699  210.266  191.049  153.199  153.461  110.562  110.072  112.646        0
>>>> 24         0        0        0  222.205  150.690  155.598  176.060  137.402  123.665  115.973  106.362        0
>>>> 25         0        0        0        0        0        0        0        0        0        0        0        0
    """
}

def parse_string(s):
    rows = []
    row_h = []
    column_h = None
    lines = s.split('\n')
    for line in lines:
        line = line.lstrip('>')
        line = line.strip()
        if not line:
            continue
        row = line.split()
        h = row.pop(0)
        if h == r'r\S':
            column_h = row
        else:
            row_h.append(h)
            rows.append([float(x.replace('*', '')) for x in row])

    return row_h, column_h, rows


def main():
    datasets = ('metze lmdb', 'tim pso v2')
    ax = plt.axes()
    for k, v in results.items():
#        if k not in ('windows', 'tim pso v2', 'pre-pso'):
        if k not in datasets:
            continue

        colour = '#' + sha1(k).hexdigest()[:6]
        row_h, col_h, data = parse_string(v)
        labelbbox={
            'facecolor': colour,
            'color': colour,
            #'edgecolor': 'none',
            'linewidth':1.5,
            'zorder':9,
            #'hatch': 'x',
            'fill': False,
        }
        col_max = [(0, 0, 0)] * len(data[0])

        for rh, row in zip(row_h, data):
            ly = max(row)
            lx = row.index(ly)
            if ly > col_max[lx][1]:
                label = '%s r%s/s%s: %.1f' % (k, rh, lx, ly)
                col_max[lx] = (lx, ly, label)

            row = [x if x else None for x in row]
            ax.plot(row, '-', color=colour)

        for lx, ly, label in col_max:
            if ly == 0:
                continue
            ax.text(lx - 0.5, ly + 0.5, label, color='black', bbox=labelbbox, fontsize=10)

    plt.show()

    for d in datasets:
        fig, ax = plt.subplots()
        rh, ch, data = parse_string(results[d])
        ax.set_title(d)
        ax.set_xlabel('S')
        ax.set_ylabel('r')
        im = ax.imshow(data)        
        fig.tight_layout()
        plt.show()
    
    
    rh, ch, windows = parse_string(results[datasets[0]])
    rh, ch, tim_pso_v2 = parse_string(results[datasets[1]])
    fig, ax = plt.subplots()
    w = np.array(windows)[4:24, 4:11]
    t = np.array(tim_pso_v2)[4:24, 4:11]

    #im = ax.imshow(windows)
    #fig.tight_layout()
    im = ax.imshow(w / t)
    fig.tight_layout()
    plt.show()

main()
