#!/usr/bin/python
"""This tool helps you to run performance tests against a number of
branches or revisions and collate the results.

Some tips:

Make a local full mirror of upstream, making subsequent fetches faster:

   git clone --mirror git://git.samba.org/samba.git samba-mirror.git

Set the CC variable to something old enough to compile the oldest
branch you're considering. Newer gcc versions will find more warnings
that turn into errors with configure.developer's -Werror

Altogether, for all 4.x releases, try something like:

    CFLAGS=-O2 CC=gcc-4.9 ./scripts/multi-perf-test  -o perf-test.json \\
                     -i -r ~/src/samba-mirror.git -t perf_tests -l \\
                     --use-patch-not-git-am

For a testing a few recent releases, in a branch that contains the
perf_test patches, preserving the working directory for later
analysis:

    ./scripts/multi-perf-test  --no-auto-patch -i -r ~/src/samba-mirror.git \\
                     -o ldb-talloc.json --preserve-tmp-dir    \\
                     2d0458a d9e5a46 a00403f e9b58fb f10abee

"""
import argparse
import os
import sys
import subprocess
import tempfile
import shutil
import traceback
import json
import re

HERE = os.path.dirname(__file__)

PATCHES = {
    'samba-4-0': [os.path.join(HERE, '../perf/samba-4.5-ad_dc.patch'),
                  os.path.join(HERE, '../perf/samba-4.5-perf.patch'),
                  os.path.join(HERE, '../perf/samba-4.2-perf.patch'),
                  os.path.join(HERE, '../perf/samba-4-0-pidl.patch'),
                  os.path.join(HERE, '../perf/samba-4-0-gnutls.patch'),
                  os.path.join(HERE, '../perf/samba-4.0-ccan-memset.patch'),
                  os.path.join(HERE, '../perf/ntlmssp-no-inline.patch'),
                  ],
    'samba-4-2': [os.path.join(HERE, '../perf/samba-4.5-ad_dc.patch'),
                  os.path.join(HERE, '../perf/samba-4.5-perf.patch'),
                  os.path.join(HERE, '../perf/samba-4.2-perf.patch'),
                  os.path.join(HERE, '../perf/ntlmssp-no-inline.patch')],
    'samba-4-5': [os.path.join(HERE, '../perf/samba-4.5-ad_dc.patch'),
                  os.path.join(HERE, '../perf/samba-4.5-perf.patch'),
                  os.path.join(HERE, '../perf/ntlmssp-no-inline.patch')],
}

PATCH_FUZZINESS = {
    os.path.join(HERE, '../perf/ntlmssp-no-inline.patch'): 1,
}


class SambaGitTree(object):

    def __init__(self, path, remote, verbosity):
        self.path = path
        self.remote = remote
        subprocess.check_call(['git', 'clone', remote, path])
        self.perf_data = []
        self.verbosity = verbosity

    def git(self, *args, **kwargs):
        cmd = ['git', '-C', self.path]
        cmd.extend(args)
        if kwargs.get('output', False):
            return subprocess.check_output(cmd)
        subprocess.check_call(cmd)

    def enperf(self, cmd, tag):
        self.perf_file = os.path.join(self.path, 'perf-%s.perf' % tag)
        cmd[:0] = ['perf', 'record',
                   '-F97',
                   '-a',
                   '-g',
                   '--call-graph', 'dwarf',
                   '-o', self.perf_file,
                   '--']
        return cmd

    def make_flame_graphs(self, bindir, dest='.'):
        collapse = os.path.join(bindir, 'stackcollapse-perf.pl')
        flamegraph = os.path.join(bindir, 'flamegraph.pl')

        perf_script = '%s.script' % self.perf_file
        perf_folded = '%s.folded' % self.perf_file
        perf_folded_samba = '%s-samba-only.folded' % self.perf_file
        svg = '%s.svg' % self.perf_file
        svg_samba = '%s-samba-only.svg' % self.perf_file

        with open(perf_script, 'w') as f:
            cmd = ['perf', 'script', '-i', self.perf_file]
            subprocess.check_call(cmd, stdout=f)

        with open(perf_folded, 'w') as f:
            cmd = [collapse, perf_script]
            subprocess.check_call(cmd, stdout=f)

        with open(perf_folded_samba, 'w') as f:
            cmd = ['grep', 'samba', perf_folded]
            subprocess.check_call(cmd, stdout=f)

        for d, s in ((svg, perf_folded),
                     (svg_samba, perf_folded_samba)):
            with open(d, 'w') as f:
                cmd = [flamegraph, '--minwidth', '0.2', '--width', '1060',
                       '--hash', s]
                subprocess.check_call(cmd, stdout=f)
            shutil.copy(d, dest)


    def make(self, *args, **kwargs):
        cmd = ['make', '-C', self.path]
        if self.verbosity:
            cmd += ['-v'] * self.verbosity
        cmd.extend(args)
        perf_tag = kwargs.get('perf_tag')
        if perf_tag is not None:
            self.enperf(cmd, perf_tag)

        subprocess.check_call(cmd)

    def configure(self, *args):
        # we nust set cwd to self.path AND use the full executable path
        cmd = [os.path.join(self.path, 'configure.developer'),
               '--abi-check-disable']
        if self.verbosity:
            cmd += ['-v'] * self.verbosity
        cmd.extend(args)
        subprocess.check_call(cmd, cwd=self.path)

    def checkout(self, tag, clean=False):
        self.git('checkout', tag)
        if clean:
            self.git('clean', '-f')

    def build(self):
        self.make('-j')

    def perf_test(self, regex=None, perf_tag=None):
        if regex is not None:
            self.make('perftest', 'TESTS=%s' % regex, perf_tag=perf_tag)
        else:
            self.make('perftest', perf_tag=perf_tag)

    def list_branches(self, pattern=None):
        # git branch -a | grep -oP 'origin/v4.+-stable'
        # git branch -a --list origin/v4*-stable
        args = ['branch', '-a']
        if pattern is not None:
            args += ['--list', pattern]
        lines = self.git(*args, output=True)
        return lines.split()

    def _get_patch_command(self, patch,
                           ignore_whitespace=False, no_questions=False,
                           fuzziness=None):
        patch = os.path.abspath(patch)
        cmd = ['patch', '-d', self.path, '-p1', '-N', '-i', patch]
        if ignore_whitespace:
            cmd.append('--ignore-whitespace')
        if no_questions:
            cmd.append('-f')
        if fuzziness is not None:
            cmd.append('-F%d' % fuzziness)

        return cmd

    def patch(self, patch, use_git_am=False, ignore_whitespace=False,
              no_questions=False):
        if not use_git_am:
            cmd = self._get_patch_command(patch, ignore_whitespace,
                                          no_questions)
            subprocess.check_call(cmd)
            return

        patch = os.path.abspath(patch)
        if ignore_whitespace:
            self.git('am', '--ignore-whitespace', '-3', patch)
        else:
            self.git('am', '-3', patch)

    def try_patch(self, patch, ignore_whitespace=False,
                  fuzziness=None):
        cmd = self._get_patch_command(patch, ignore_whitespace,
                                      no_questions=True,
                                      fuzziness=fuzziness)
        cmd.extend(['--dry-run', '--quiet'])
        try:
            suppressed_output = subprocess.check_output(cmd)
        except subprocess.CalledProcessError:
            return False
        return True

    def collect_perf_data(self, tag, add_date=False):
        f = open(os.path.join(self.path, 'st/summary.json'))
        if add_date:
            date = self.git('log', '--pretty=tformat:%cd',
                            '--date=format:%Y-%m-%d %H:%M', '-n1')
            self.perf_data.append([tag, json.load(f), date])
        else:
            self.perf_data.append([tag, json.load(f)])
        f.close()

    def write_json(self, fn, backup=False):
        if backup:
            fn2 = fn + '~'
            os.rename(fn, fn2)

        f = open(fn, 'w')
        json.dump(self.perf_data, f,
                  sort_keys=True, indent=2, separators=(',', ': '))
        f.close()

    def guess_the_right_patches(self, revision, ignore_whitespace=True):
        # For specific releases we KNOW.
        if re.search(r'4-[0]', revision):
            return PATCHES['samba-4-0']
        if re.search(r'4-[12]', revision):
            return PATCHES['samba-4-2']
        if re.search(r'4-[345]', revision):
            return PATCHES['samba-4-5']
        # now we don't know, so we TRY and SEE.
        patches = []
        for p in PATCHES['samba-4-0']:
            fuzziness = PATCH_FUZZINESS.get(p)
            if self.try_patch(p, ignore_whitespace, fuzziness=fuzziness):
                patches.append(p)
                print "using patch %s" % p
        return patches

    def get_last_n_weeks(self, n, reference='last Saturday'):
        # find the last n autobuild commits that immediately precede a weekend.
        #
        #git log -n 1 --before="12 weeks ago" origin/master --grep Autobuild-Date --decorate --pretty='tformat:%h %cI %s'
        results = []
        latest_commit = None
        for i in range(n):
            datestr = "%s - %d weeks" % (reference, i)
            s = self.git('rev-list', '-n1',
                         '--before', datestr,
                         'origin/master',
                         '--grep', 'Autobuild-Date',
                         output=True)
            results.append(s.strip())
        results.reverse()
        return results


class PerfTestException(Exception):
    pass


def try_and_try_again(interactive, fn, *args, **kwargs):
    while True:
        try:
            fn(*args, **kwargs)
            return
        except Exception:
            if not interactive:
                raise
            print '-' * 72
            traceback.print_exc(file=sys.stdout)
            print '-' * 72
            print "That didn't work."
            print "Hit return to try again (perhaps after ^Z/fg to fix things)"
            print "or type 'q' to skip this step"
            print "or type 'next' to skip this branch"
            x = raw_input("> ")
            if x in 'qQ':
                return
            elif x == 'next':
                raise PerfTestException()


def main():
    parser = argparse.ArgumentParser(description=__doc__,
                        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('branches', nargs='*',
                        help="test these branches/refspecs")
    parser.add_argument('-d', '--working-dir', default=None,
                        help="use this directory (default: a tmpdir)")
    parser.add_argument('--preserve-tmp-dir', action='store_true',
                        help="do not clean up the tmp working directory")
    parser.add_argument('--test-releases', nargs='?',
                        const='origin/v4-[0-9]*-stable',
                        help=("test stable release branches from 4.0 "
                              "(or the supplied pattern)"))
    parser.add_argument('--last-n-weeks', type=int,
                        help=("test autobuilds from this many recent Saturdays"))
    parser.add_argument('-r', '--remote',
                        default='git://git.samba.org/samba.git',
                        help="git remote to use")
    parser.add_argument('-p', '--patch', action='append',
                        help="apply this patch to each tree")
    parser.add_argument('--no-auto-patch', action='store_true',
                        help="don't try to apply necessary perf test patches")
    parser.add_argument('-i', '--interactive', action='store_true',
                        help="pause when build/patch fails (use ^Z/fg/return)")
    parser.add_argument('--stop-on-error', action='store_true',
                        help="if a build fails, stop!")
    parser.add_argument('--use-git-am-not-patch', action='store_true',
                        help="patch using git am")
    parser.add_argument('-l', '--ignore-whitespace', action='store_true',
                        help="ignore whitespace differences in patch")
    parser.add_argument('--no-patch-questions', action='store_true',
                        help="tell patch to shut up and not complain")
    parser.add_argument('--run-perf', action='store_true',
                        help="collect linux perf data during each run")
    parser.add_argument('-c', '--clean-between-revisions', action='store_true',
                        help=("remove untracked files between commits "
                              "(slower, safer builds)"))
    parser.add_argument('--flame-graph-path',
                        help=("find Flamegraph binaries here "
                              "(implies --run-perf)"))
    parser.add_argument('--verbose', '-v', action='count',
                        help=('increase verbosity of subprocesses '
                              '(-v -v -v for more)'))
    parser.add_argument('-t', '--test-regex',
                        help="restrict tests with this regex")
    parser.add_argument('-o', '--output', default='samba-performance.json',
                        help="write data here")
    parser.add_argument('--best-of', metavar='N', type=int, default=1,
                        help="run this many times")
    parser.add_argument('-D', '--record-revision-date', action='store_true',
                        help='save the commit date in the JSON')

    args = parser.parse_args()

    try:
        f = open(args.output, 'a')
        f.close()
    except IOError, e:
        print "You can't write to %s:" % args.output
        print e.strerror
        print "Stopping..."
        sys.exit(1)

    branches = args.branches
    d = args.working_dir

    if args.flame_graph_path is not None:
        args.run_perf = True

    try:
        if d is None:
            d = tempfile.mkdtemp(prefix='samba-perf-test')

        print "using directory %r" % d

        tree = SambaGitTree(d, args.remote, args.verbose)

        if args.test_releases:
            # let's assume the named branches are newer thant the old releases
            # (because we have to assume something).
            branches = tree.list_branches(args.test_releases) + branches

        if args.last_n_weeks:
            commits = tree.get_last_n_weeks(args.last_n_weeks)
            branches = commits + branches

        for i in range(args.best_of):
            tree.git('clean', '-x', '-f')
            for b in branches:
                print ("::: trying branch %s in directory %s (round %d)" %
                       (b, tree.path, i))
                tree.git('reset', '--hard')
                tree.git('clean', '-f')
                tree.checkout(b)
                if args.clean_between_revisions:
                    tree.git('clean', '-x', '-f')
                try:
                    patches = []
                    if not args.no_auto_patch:
                        patches.extend(tree.guess_the_right_patches(b))
                    if args.patch:
                        patches.extend(args.patch)
                    for patch in patches:
                        print >> sys.stderr, "using patch %s" % patch
                        try:
                            try_and_try_again(args.interactive, tree.patch, patch,
                                              args.use_git_am_not_patch,
                                              args.ignore_whitespace,
                                              args.no_patch_questions)
                        except subprocess.CalledProcessError, e:
                            print >> sys.stderr, "Patch failed with %s" % e
                            if not args.no_patch_questions:
                               raise

                    try_and_try_again(args.interactive, tree.configure)
                    try_and_try_again(args.interactive, tree.build)
                except PerfTestException:
                    print "aborting branch %s" % b
                    continue
                except subprocess.CalledProcessError, e:
                    if args.stop_on_error:
                        raise
                    print e
                    print "aborting branch %s" % b
                    continue

                try:
                    if args.run_perf:
                        perf_tag = re.sub(r'[^\w]', '-', b)
                        tree.perf_test(args.test_regex, perf_tag)
                    else:
                        tree.perf_test(args.test_regex)
                except subprocess.CalledProcessError, e:
                    print >> sys.stderr, "perf test failed: %s" % e

                tree.collect_perf_data(b, args.record_revision_date)

                if args.flame_graph_path:
                    tree.make_flame_graphs(args.flame_graph_path)

            tree.write_json(args.output, backup=True)

            if args.preserve_tmp_dir:
                tree.write_json(tree.path + '/round-%d.json' % i)

    finally:
        tree.write_json(args.output, backup=True)
        if args.working_dir is None and not args.preserve_tmp_dir:
            shutil.rmtree(d)

main()
