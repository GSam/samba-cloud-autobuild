#!/usr/bin/python
import argparse
import os
import sys
import subprocess
import tempfile
import random

from common import add_common_args, process_common_args, sanitise_hostname
from common import get_credentials, get_package_list, OPENRC_TABLE

try:
    from pipes import quote
except ImportError:
    from shlex import quote

HERE = os.path.dirname(__file__)

YAML_TEMPLATE = os.path.join(HERE, 'templates/user-config.yaml.template')
YAML_TEMPLATE_1204 = os.path.join(HERE, 'templates/user-config-12.04.yaml.template')

SERVER_NAME = "samba-build-%s-%s"


def write_yaml_config(remote, branch, image, region, onfail, readahead,
                      maxtime, tmpfs=False, skip_samba_build=False,
                      no_secrets=False):
    if 'centos' in image:
        template = YAML_TEMPLATE
        user = 'centos'
        package_list = get_package_list('centos6')
    elif '12.04' in image or '10.04' in image:
        template = YAML_TEMPLATE_1204
        user = 'ubuntu'
        package_list = None
    else:
        template = YAML_TEMPLATE
        user = 'ubuntu'
        package_list = get_package_list('ubuntu')

    credentials = get_credentials(region)

    if no_secrets:
        # There is no point preserving any of the credential
        # variables, even though most are not really secret -- they
        # are only useful in conjunction with the password.
        credentials = {k: '' for k, v in credentials.items()}

    f = open(template)
    s = f.read()
    f.close()
    s = s.format(remote=remote, branch=branch, onfail=onfail,
                 readahead=readahead, maxtime=maxtime, tmpfs=tmpfs,
                 user=user, package_list=package_list,
                 skip_samba_build=skip_samba_build, **credentials)
    f = tempfile.NamedTemporaryFile(suffix='.yaml',
                                    prefix='samba-cloud-autobuild-user-config-',
                                    delete=False)
    f.write(s)
    f.close()
    return f.name


def boot(flavor, image, yaml_file, server_name, key_name, region,
         skip_samba_build=False, dry_run=False, net_id=None):
    open_rc = OPENRC_TABLE[region]
    if key_name is None:
        key_name = '$USER'  # maybe the environment here is better
    args = ['.', open_rc, ';', 'nova', 'boot']
    if flavor:
        args += ['--flavor', quote(flavor)]
    if image:
        args += ['--image', quote(image)]

    args += ['--user-data', yaml_file]
    args += ['--key-name', key_name]
    args += ['--config-drive', 'true']
    args += ['--poll']
    if net_id is not None:
        args += ['--nic', 'net-id=%s' % net_id]
    args += [server_name]
    if dry_run:
        print ' '.join(args)
    else:
        subprocess.check_call(' '.join(args), shell=True)


def find_good_net_id():
    cmd = ['nova', 'net-list']
    s = subprocess.check_output(cmd)
    # we're looking for one like this:
    # | 10f83a57-2c8c-40c9-a472-a2ae10e2a65f | 10.59.0.0/24     | -    |
    # Let's assume it is the first.
    cells = s.split('|', 6)
    return cells[5].strip()


def main():
    parser = argparse.ArgumentParser()
    add_common_args(parser)
    default_server_suffix = "%s-%04d" % (os.environ.get('USER'),
                                         random.randint(0, 9999))
    parser.add_argument('suffix', nargs='?',
                        default=default_server_suffix,
                        help="name the server with this suffix")

    parser.add_argument('--net-id',
                        help=("Use net with this UUID "
                              "(auto to search for a good one)"))

    args = parser.parse_args()
    process_common_args(args)

    yaml_file = write_yaml_config(args.remote, args.branch, args.image,
                                  args.region, args.onfail, args.readahead,
                                  args.maxtime, args.tmpfs,
                                  skip_samba_build=args.skip_samba_build,
                                  no_secrets=args.no_secrets)
    if args.whole_name:
        server_name = args.suffix
    else:
        server_name = SERVER_NAME % (args.branch, args.suffix)
        if args.no_secrets:
            server_name += '-no-secrets'

    server_name = sanitise_hostname(server_name)

    if args.verbose:
        print >> sys.stderr, "YAML file is %s" % yaml_file

    if args.net_id == 'auto':
        net_id = find_good_net_id()
    else:
        net_id = args.net_id

    boot(args.flavor, args.image, yaml_file, server_name, args.key_name,
         region=args.region, dry_run=args.dry_run, net_id=net_id)


main()
