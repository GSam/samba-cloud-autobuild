#!/usr/bin/python
import argparse
import os
import sys
import subprocess
import tempfile
import random

from common import add_common_args, process_common_args, sanitise_hostname, run_nova_cmd
from common import get_credentials, get_package_list, OPENRC_TABLE, SambaCloudError

try:
    from pipes import quote
except ImportError:
    from shlex import quote

HERE = os.path.dirname(__file__)

YAML_TEMPLATE = os.path.join(HERE, 'templates/user-config.yaml.template')
YAML_TEMPLATE_1204 = os.path.join(HERE, 'templates/user-config-12.04.yaml.template')

SERVER_NAME = "samba-build-%s-%s"

EMAIL_RECIPIENT = 'samba-dev@catalyst.net.nz'

def write_yaml_config(remote, branch, image, region, onfail, readahead,
                      maxtime, tmpfs=False, ramfs=False,
                      dont_fail_immediately=False, run_wintest=False,
                      skip_samba_build=False, skip_samba_autobuild=False,
                      verbose_logs='', no_secrets=False, server_name=None,
                      email_recipient=EMAIL_RECIPIENT,
                      flame_graphs=False, restrict_tests='', on_success=None,
                      ident='', password='penguin12#', use_default_pass=False,
                      autobuild_env=''):
    if 'centos' in image:
        template = YAML_TEMPLATE
        user = 'centos'
        package_list = get_package_list('centos6')
    elif '12.04' in image or '10.04' in image:
        template = YAML_TEMPLATE_1204
        user = 'ubuntu'
        package_list = None
    elif '14.04' in image:
        template = YAML_TEMPLATE
        user = 'ubuntu'
        package_list = get_package_list('ubuntu-1404')
    else:
        template = YAML_TEMPLATE
        user = 'ubuntu'
        package_list = get_package_list('ubuntu')

    credentials = get_credentials(region)

    if restrict_tests:
        restrict_tests = '--restrict-tests=%r' % restrict_tests
    else:
        restrict_tests  = ''

    if no_secrets:
        # There is no point preserving any of the credential
        # variables, even though most are not really secret -- they
        # are only useful in conjunction with the password.
        credentials = {k: '' for k, v in credentials.items()}

    f = open(template)
    s = f.read()
    f.close()
    s = s.format(remote=remote, branch=branch, onfail=onfail,
                 readahead=readahead, maxtime=maxtime, tmpfs=tmpfs,
                 ramfs=ramfs, user=user, package_list=package_list,
                 skip_samba_build=skip_samba_build,
                 skip_samba_autobuild=skip_samba_autobuild,
                 run_wintest=run_wintest,
                 dont_fail_immediately=int(dont_fail_immediately),
                 verbose=verbose_logs,
                 server_name=server_name, flame_graphs=flame_graphs,
                 restrict_tests=restrict_tests, on_success=on_success,
                 generated_id=("%04d" % ident), generated_password=password,
                 use_default_pass = use_default_pass,
                 email_recipient=email_recipient, autobuild_env=autobuild_env,
                 **credentials)
    f = tempfile.NamedTemporaryFile(suffix='.yaml',
                                    prefix='samba-cloud-autobuild-user-config-',
                                    delete=False)
    f.write(s)
    f.close()
    return f.name


def boot(flavor, image, yaml_file, server_name, key_name, region,
         skip_samba_build=False, skip_samba_autobuild=False,
         dry_run=False, net_id=None):
    open_rc = OPENRC_TABLE[region]
    if key_name is None:
        key_name = '$USER'  # maybe the environment here is better
    args = ['.', open_rc, ';', 'nova', 'boot']
    if flavor:
        args += ['--flavor', quote(flavor)]
    if image:
        args += ['--image', quote(image)]

    args += ['--user-data', yaml_file]
    args += ['--key-name', key_name]
    args += ['--poll']
    if net_id is not None:
        args += ['--nic', 'net-id=%s' % net_id]
    args += [server_name]
    if dry_run:
        print ' '.join(args)
    else:
        subprocess.check_call(' '.join(args), shell=True)


def find_good_net_id(region):
    s = run_nova_cmd(['tenant-network-list'],
                     region=region)
    # we're looking for one like this:
    # | 10f83a57-2c8c-40c9-a472-a2ae10e2a65f | 10.59.0.0/24     | -    |
    # Let's assume it is the first one that isn't called "public-net"
    for line in s.split('\n')[3:]:
        cells = line.split('|')
        net = cells[2].strip()
        if net != 'public-net':
            uuid = cells[1].strip()
            print "using net %s (%s)" % (net, uuid)
            return uuid

    raise SambaCloudError("There seems to be no good net ID")


def main():
    parser = argparse.ArgumentParser()
    add_common_args(parser)
    ident = random.randint(0, 9999)
    password = subprocess.check_output("pwgen -s 20", shell=True)[:20]

    default_server_suffix = "%s-%04d" % (os.environ.get('USER'),
                                         ident)
    parser.add_argument('suffix', nargs='?',
                        default=default_server_suffix,
                        help="name the server with this suffix")

    parser.add_argument('--net-id',
                        help=("Use net with this UUID "
                              "(auto to search for a good one)"))

    parser.add_argument('--dont-fail-immediately', action='store_true',
                        help=("don't stop testing on the first error"))

    parser.add_argument('--verbose-logs', action='store_const',
                        const='--verbose', default='',
                        help=("run autobuild.py --verbose"))

    parser.add_argument('--flame-graphs', action='store_true',
                        help=("create flame graphs"))

    parser.add_argument('--restrict-tests', default='',
                        help="only run tests matching this regex")

    parser.add_argument('--email-recipient', default=EMAIL_RECIPIENT,
                        help="send email here [%s]" % EMAIL_RECIPIENT)

    parser.add_argument('--on-success', default="delete",
                        help=("One of 'suspend|shelve|continue|"
                              "delayed-delete|delete' (default 'delete')"))

    parser.add_argument('--run-wintest', action='store_true',
                        help=("run wintest after building"))

    parser.add_argument('--use-default-pass', action='store_true',
                        help=("use a default (insecure) password for machines and samba"))

    parser.add_argument('--tdb-no-fsync', action='store_const', default='',
                        const='TDB_NO_FSYNC=1',
                        help="Don't wait for fsync")

    parser.add_argument('--use-ccache', action='store_const', default='',
                        const='CC="ccache gcc"',
                        help="Use ccache (faster build; uses ~2GB disk)")

    args = parser.parse_args()
    process_common_args(args)

    if ('r2' in args.flavor or 'r4' in args.flavor):
        print "Samba WILL NOT WORK with %s" % args.flavor
        print "Stopping now to save your time!"
        sys.exit(1)

    if args.whole_name:
        server_name = args.suffix
    else:
        server_name = SERVER_NAME % (args.branch, args.suffix)
        if args.no_secrets:
            server_name += '-no-secrets'

    server_name = sanitise_hostname(server_name)

    autobuild_env = ' '.join((args.tdb_no_fsync,
                              args.use_ccache))

    yaml_argnames = {'remote', 'branch', 'image',
                     'region', 'onfail', 'readahead',
                     'maxtime', 'tmpfs', 'ramfs',
                     'dont_fail_immediately', 'run_wintest',
                     'skip_samba_build', 'skip_samba_autobuild',
                     'verbose_logs', 'no_secrets',
                     'flame_graphs', 'restrict_tests',
                     'use_default_pass', 'email_recipient',
                     'on_success'}

    yaml_kwargs = {k: v for k, v in vars(args).items()
                   if k in yaml_argnames}

    yaml_file = write_yaml_config(ident=ident, password=password,
                                  autobuild_env=autobuild_env,
                                  server_name=server_name, **yaml_kwargs)

    if args.verbose:
        print >> sys.stderr, "YAML file is %s" % yaml_file

    if args.net_id == 'auto':
        net_id = find_good_net_id(args.region)
    else:
        net_id = args.net_id

    boot_argnames = {'flavor', 'image',
                     'key_name', 'region', 'dry_run'}

    boot_kwargs = {k: v for k, v in vars(args).items()
                   if k in boot_argnames}

    boot(yaml_file=yaml_file, server_name=server_name, net_id=net_id,
         **boot_kwargs)


main()
