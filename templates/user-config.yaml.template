#cloud-config

apt_mirror: http://ubuntu.catalyst.net.nz/ubuntu
apt_mirror_search:
  - http://ubuntu.catalyst.net.nz/ubuntu
locale: en_NZ.UTF-8

{package_list}

package_upgrade: true

# Be careful modifying this next bit that writes the script
# /usr/local/bin/clone-samba -- the image we're starting with has
# probably already run this.

write_files:
 - content: |
    #!/bin/bash
    export OS_AUTH_URL="{OS_AUTH_URL}"
    export OS_TENANT_ID="{OS_TENANT_ID}"
    export OS_TENANT_NAME="{OS_TENANT_NAME}"
    export OS_USERNAME="{OS_USERNAME}"
    export OS_PASSWORD="{OS_PASSWORD}"
    export OS_REGION_NAME="{OS_REGION_NAME}"
    if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
   path: /usr/local/bin/openstack_creds
   permissions: '0755'

 - content: |
    #!/bin/bash
    [ {use_default_pass} == "True" ] && exit 0
    sudo apt-get -y install sed
    sed -i -- 's/win_pass@1/{generated_password}/g; s/p@ssword_1/{generated_password}1/g; s/p@ssword_2/{generated_password}2/g; s/p@ssword_3/{generated_password}3/g' /home/ubuntu/samba/wintest/conf/bob.conf
   path: /usr/local/bin/edit-config
   permissions: '0755'

 - content: |
    #!/bin/bash
    [ {run_wintest} == "False" ] && exit 0
    sudo apt-get -y install bind9
    sudo service bind9 stop
    sudo ln -s /etc/apparmor.d/usr.sbin.named /etc/apparmor.d/disable/
    sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.named
    sudo ~/samba/wintest/test-s4-howto.py --conf ~/samba/wintest/conf/bob.conf --ident "{generated_id}"

   path: /usr/local/bin/start-wintest
   permissions: '0755'

 - content: |
    #ps1_sysnative

    # The Telnet server needs to be enabled
    install-windowsfeature "telnet-server"
    install-windowsfeature "telnet-client"
    install-windowsfeature -name AD-Domain-Services -IncludeManagementTools

    Set-ADUser -Identity Administrator -ChangePasswordAtNextLogon $false
    wmic UserAccount set PasswordExpires=False

    If("{use_default_pass}" -eq "True"){{
        net user Administrator win_pass@1
    }}
    Else{{
        net user Administrator {generated_password}
    }}

    cmd /C netsh advfirewall set allprofiles state off
    cmd /C tlntadmn config maxconn=1024

    cmd /C net localgroup /add telnetclients "authenticated users"
    cmd /C sc config tlntsvr start=auto
    cmd /C sc start tlntsvr

   path: /usr/local/bin/win-userdata
   permissions: '0755'

 - content: |
    #!/bin/bash
    set -x
    set -e
    cd ~
    git clone git://git.catalyst.net.nz/samba.git
    cd samba
    git remote add catalyst git://git.catalyst.net.nz/samba.git
    git remote add abartlet git://git.samba.org/abartlet/samba.git
    git remote set-url origin git://git.samba.org/samba.git
    git fetch catalyst
   path: /usr/local/bin/clone-samba
   permissions: '0755'

 - content: |
    #!/bin/bash
    set -x
    set -e
    export AUTOBUILD=/home/{user}/autobuild
    rm -rf $AUTOBUILD/*
    mkdir -p $AUTOBUILD
    if [ "{ramfs}" == "True" ]; then
        mkdir -p $AUTOBUILD-tmpfs
        mount -t tmpfs -o size=80% tmpfs $AUTOBUILD-tmpfs
        dd if=/dev/zero of=$AUTOBUILD-tmpfs/ramfs bs=1M seek=6K count=1
        mkfs.ext4 -F $AUTOBUILD-tmpfs/ramfs
        mount $AUTOBUILD-tmpfs/ramfs $AUTOBUILD -o loop
    elif [ "{tmpfs}" == "True" ]; then
        mount -t tmpfs -o size=80% tmpfs $AUTOBUILD
    fi
    chown {user}  $AUTOBUILD
   path: /usr/local/bin/prepare-autobuild-dir
   permissions: '0755'

 - content: |
    #!/bin/bash
    set -x
    set -e
    [ {skip_samba_build} == "True" ] && exit 0
    cd ~
    cd samba
    git remote rm our_repo && echo "removed old remote"
    git remote add our_repo {remote}
    git fetch our_repo
    git checkout our_repo/{branch}

    [ {skip_samba_autobuild} == "True" ] && exit 0
    export SMBD_MAXTIME={maxtime}
    export AUTOBUILD_NO_FAIL_IMMEDIATELY={dont_fail_immediately}
    CC="ccache gcc" ./script/autobuild.py --email-from={email_recipient} \
                          --email={email_recipient} \
                          --email-server=smtp1.catalyst.net.nz \
                          --always-email --attach-logs \
                          --nocleanup --testbase=$HOME/autobuild --tail \
                          {restrict_tests} {verbose}
   path: /usr/local/bin/build-samba
   permissions: '0755'

 - content: |
    #!/bin/bash
    export OS_AUTH_URL="{OS_AUTH_URL}"
    export OS_TENANT_ID="{OS_TENANT_ID}"
    export OS_TENANT_NAME="{OS_TENANT_NAME}"
    export OS_USERNAME="{OS_USERNAME}"
    export OS_PASSWORD="{OS_PASSWORD}"
    export OS_REGION_NAME="{OS_REGION_NAME}"
    if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
    sync
    nova shelve $(hostname)
   path: /usr/local/bin/shelve-host
   permissions: '0755'

 - content: |
    #!/bin/bash
    export OS_AUTH_URL="{OS_AUTH_URL}"
    export OS_TENANT_ID="{OS_TENANT_ID}"
    export OS_TENANT_NAME="{OS_TENANT_NAME}"
    export OS_USERNAME="{OS_USERNAME}"
    export OS_PASSWORD="{OS_PASSWORD}"
    export OS_REGION_NAME="{OS_REGION_NAME}"
    if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
    sync
    nova suspend $(hostname)
   path: /usr/local/bin/suspend-host
   permissions: '0755'

 - content: |
    #!/bin/bash
    export OS_AUTH_URL="{OS_AUTH_URL}"
    export OS_TENANT_ID="{OS_TENANT_ID}"
    export OS_TENANT_NAME="{OS_TENANT_NAME}"
    export OS_USERNAME="{OS_USERNAME}"
    export OS_PASSWORD="{OS_PASSWORD}"
    export OS_REGION_NAME="{OS_REGION_NAME}"
    if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
    (sleep 300; nova delete $(hostname))&
   path: /usr/local/bin/delete-host
   permissions: '0755'

 - content: |
    #!/bin/bash
    echo "We failed! doing nothing"
   path: /usr/local/bin/continue-host
   permissions: '0755'

 - content: |
    #!/bin/bash
    set -x
    set -e
    freq=97
    echo "recording perf information at $freq Hz"
    home=/home/{user}
    dest=/home/{user}/autobuild

    PERF_FILE=$dest/perf-{server_name}.perf
    PERF_SCRIPT=$dest/perf-{server_name}.script
    PERF_FOLDED=$dest/perf-{server_name}.folded
    PERF_REDUCED_FOLDED=$dest/perf-{server_name}-reduced.folded
    PERF_SAMBA_FOLDED=$dest/perf-{server_name}-samba.folded
    FLAME_REDUCED_SVG=$dest/flame-{server_name}-reduced.svg
    FLAME_SAMBA_SVG=$dest/flame-{server_name}-samba.svg
    FLAME_FULL_SVG=$dest/flame-{server_name}.svg
    ICICLE_SVG=$dest/icicle-{server_name}-reduced.svg
    KERNEL=$(uname -r)
    export CFLAGS="-O2 -fno-omit-frame-pointer -fno-inline $CFLAGS"

    cd $home
    if [[ ! -d FlameGraph ]]; then
        sudo -u {user} git clone https://github.com/brendangregg/FlameGraph.git
    fi
    apt-get -y install linux-tools-$KERNEL
    # note the double {{ }} to get literal curly braces past python formatting.
    if [[ ${{KERNEL:0:1}} == 3 ]]; then
        NOTE=$(mktemp -t XXXXXXXXX.txt)
        echo $NOTE
        echo "You have asked for flame graphs on a system using the REALLY OLD" > $NOTE
        echo "kernel $KERNEL." >> $NOTE
        echo "For some reason this only works with DWARF call-graphs, which" >> $NOTE
        echo "eat up a lot of disk and do badly on deep stacks." >> $NOTE
        echo >> $NOTE
        echo "If you don't get any results, you should assume the disk is full." >> $NOTE
        echo >> $NOTE
        echo "Simple workarounds are using a newer image like ubuntu-16.04-x86_64, or" >> $NOTE
        echo "restricting the tests with --restrict-tests." >> $NOTE
        send-multipart-email 'NOTE: {server_name} flame graphs are using DWARF and may fail' $NOTE
        freq=57
        sudo perf record -F $freq -a  -g --call-graph dwarf,4096 -o $PERF_FILE  -- su {user} -l -c /usr/local/bin/build-samba
    else
        sudo perf record -F $freq -a  -g  -o $PERF_FILE  -- su {user} -l -c /usr/local/bin/build-samba
    fi
    sudo perf script -i $PERF_FILE > $PERF_SCRIPT
    $home/FlameGraph/stackcollapse-perf.pl $PERF_SCRIPT > $PERF_FOLDED
    grep -P -v '^(?:git|cc|x86_64-linux-gnu-ld|ld|as|gcc|xsltproc|swapper|systemd-journal|collect2)' $PERF_FOLDED > $PERF_REDUCED_FOLDED
    grep -P '^samba' $PERF_FOLDED > $PERF_SAMBA_FOLDED

    $home/FlameGraph/flamegraph.pl --minwidth 0.1 --width 1060 --hash  $PERF_REDUCED_FOLDED > $FLAME_REDUCED_SVG
    $home/FlameGraph/flamegraph.pl --minwidth 0.1 --width 1060 --hash  $PERF_SAMBA_FOLDED > $FLAME_SAMBA_SVG
    $home/FlameGraph/flamegraph.pl --minwidth 0.1 --width 1060 --hash  $PERF_FOLDED > $FLAME_FULL_SVG
    $home/FlameGraph/flamegraph.pl --reverse --inverted -colors=chain --hash --minwidth 0.2 --width 1060 $PERF_REDUCED_FOLDED > $ICICLE_SVG

    send-multipart-email '{server_name} flame graphs'  $FLAME_REDUCED_SVG $ICICLE_SVG $FLAME_FULL_SVG $FLAME_SAMBA_SVG
   path: /usr/local/bin/perf-record-build-samba
   permissions: '0755'

 - content: |
    #!/usr/bin/python
    import sys
    import smtplib
    import email
    import os
    from email.mime.image import MIMEImage
    from email.mime.multipart import MIMEMultipart as Message
    from email.mime.text import MIMEText

    server = 'smtp1.catalyst.net.nz'
    recipient = '{email_recipient}'
    msg = Message()
    msg['Subject'] = sys.argv[1]
    msg['To'] = recipient
    msg['From'] = recipient

    for fn in sys.argv[2:]:
        f = open(fn, 'rb')
        content = f.read()
        f.close()
        save_fn = os.path.basename(fn)
        if fn.endswith('.svg'):
            a = MIMEImage(content, 'svg+xml')
        else:
            a = MIMEText(content)
        a.add_header('Content-Disposition','attachment', filename=save_fn)
        msg.attach(a)

    s = smtplib.SMTP(server)
    s.sendmail(recipient, [recipient], str(msg))
    s.quit()
   path: /usr/local/bin/send-multipart-email
   permissions: '0755'

 - content: |
    #!/bin/bash
    set -x
    if [ "{flame_graphs}" == "True" ]; then
       /usr/local/bin/perf-record-build-samba
    else
       su {user} -l -c /usr/local/bin/build-samba
       if [ {run_wintest} == "True" ]; then
          su {user} -l -c /usr/local/bin/edit-config
          su {user} -l -c /usr/local/bin/start-wintest
       fi
    fi
    if [ $? ]; then
      /usr/local/bin/{onfail}-host
    else
      /usr/local/bin/{on_success}-host
    fi
   path: /usr/local/bin/run-autobuild
   permissions: '0755'

 - content: |
    #!/bin/bash
    sleep 5d
    /usr/local/bin/delete-host
   path: /usr/local/bin/delayed-delete-host
   permissions: '0755'

 - content:
    HRNGDEVICE=/dev/urandom
   path: /etc/default/rng-tools

# run-autobuild will call the on-fail or on-success handlers depending on
# the build process return codes.
runcmd:
 - set -x
 - echo 0 > /proc/sys/kernel/yama/ptrace_scope
 - echo 0 > /proc/sys/kernel/perf_event_paranoid
 - mount / -o remount,rw,nobarrier
 - /etc/init.d/rng-tools start
 - ln -sf /usr/bin/ld.gold /usr/bin/ld
 - [ blockdev, --setra, {readahead}, /dev/vda]
 - [ /usr/local/bin/prepare-autobuild-dir]
 - [ su, {user}, -l, -c, /usr/local/bin/clone-samba]
 - /usr/local/bin/run-autobuild
