#cloud-config

apt_mirror: http://ubuntu.catalyst.net.nz/ubuntu
apt_mirror_search:
  - http://ubuntu.catalyst.net.nz/ubuntu
locale: en_NZ.UTF-8

{package_list}

package_upgrade: true

# Be careful modifying this next bit that writes the script
# /usr/local/bin/clone-samba -- the image we're starting with has
# probably already run this.

write_files:
 - content: |
    #!/bin/bash
    set -x
    set -e
    cd ~
    git clone git://git.catalyst.net.nz/samba.git
    cd samba
    git remote add catalyst git://git.catalyst.net.nz/samba.git
    git remote add abartlet git://git.samba.org/abartlet/samba.git
    git remote set-url origin git://git.samba.org/samba.git
    git fetch catalyst
   path: /usr/local/bin/clone-samba
   permissions: '0755'

 - content: |
    #!/bin/bash
    set -x
    set -e
    export AUTOBUILD=/home/{user}/autobuild
    rm -rf $AUTOBUILD/*
    mkdir -p $AUTOBUILD
    if [ "{ramfs}" == "True" ]; then
        mkdir -p $AUTOBUILD-tmpfs
        mount -t tmpfs -o size=80% tmpfs $AUTOBUILD-tmpfs
        dd if=/dev/zero of=$AUTOBUILD-tmpfs/ramfs bs=1M seek=6K count=1
        mkfs.ext4 -F $AUTOBUILD-tmpfs/ramfs
        mount $AUTOBUILD-tmpfs/ramfs $AUTOBUILD -o loop
    elif [ "{tmpfs}" == "True" ]; then
        mount -t tmpfs -o size=80% tmpfs $AUTOBUILD
    fi
    chown {user}  $AUTOBUILD
   path: /usr/local/bin/prepare-autobuild-dir
   permissions: '0755'

 - content: |
    #!/bin/bash
    set -x
    set -e
    [ {skip_samba_build} == "True" ] && exit 0
    cd ~
    cd samba
    git remote rm our_repo && echo "removed old remote"
    git remote add our_repo {remote}
    git fetch our_repo
    git checkout our_repo/{branch}
    export SMBD_MAXTIME={maxtime}
    export AUTOBUILD_NO_FAIL_IMMEDIATELY={dont_fail_immediately}
    CC="ccache gcc" ./script/autobuild.py --email-from=samba-dev@catalyst.net.nz \
                          --email=samba-dev@catalyst.net.nz \
                          --email-server=smtp1.catalyst.net.nz \
                          --always-email --attach-logs \
                          --nocleanup --testbase=$HOME/autobuild --tail \
                          {restrict_tests} {verbose}
    echo /usr/local/bin/{on_success}-host | at 'now + 5 minutes'

   path: /usr/local/bin/build-samba
   permissions: '0755'

 - content: |
    #!/bin/bash
    export OS_AUTH_URL="{OS_AUTH_URL}"
    export OS_TENANT_ID="{OS_TENANT_ID}"
    export OS_TENANT_NAME="{OS_TENANT_NAME}"
    export OS_USERNAME="{OS_USERNAME}"
    export OS_PASSWORD="{OS_PASSWORD}"
    export OS_REGION_NAME="{OS_REGION_NAME}"
    if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
    sync
    nova shelve $(hostname)
   path: /usr/local/bin/shelve-host
   permissions: '0755'

 - content: |
    #!/bin/bash
    export OS_AUTH_URL="{OS_AUTH_URL}"
    export OS_TENANT_ID="{OS_TENANT_ID}"
    export OS_TENANT_NAME="{OS_TENANT_NAME}"
    export OS_USERNAME="{OS_USERNAME}"
    export OS_PASSWORD="{OS_PASSWORD}"
    export OS_REGION_NAME="{OS_REGION_NAME}"
    if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
    sync
    nova suspend $(hostname)
   path: /usr/local/bin/suspend-host
   permissions: '0755'

 - content: |
    #!/bin/bash
    export OS_AUTH_URL="{OS_AUTH_URL}"
    export OS_TENANT_ID="{OS_TENANT_ID}"
    export OS_TENANT_NAME="{OS_TENANT_NAME}"
    export OS_USERNAME="{OS_USERNAME}"
    export OS_PASSWORD="{OS_PASSWORD}"
    export OS_REGION_NAME="{OS_REGION_NAME}"
    if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
    nova delete $(hostname)
   path: /usr/local/bin/delete-host
   permissions: '0755'

 - content: |
    #!/bin/bash
    echo "We failed! doing nothing"
   path: /usr/local/bin/continue-host
   permissions: '0755'

 - content: |
    #!/bin/bash
    freq=97
    echo "recording perf information at $freq Hz"
    home=/home/{user}
    dest=/home/{user}/autobuild

    PERF_FILE=$dest/perf-{server_name}.perf
    PERF_SCRIPT=$dest/perf-{server_name}.script
    PERF_FOLDED=$dest/perf-{server_name}.folded
    PERF_REDUCED_FOLDED=$dest/perf-{server_name}-reduced.folded
    FLAME_REDUCED_SVG=$dest/flame-{server_name}-reduced.svg
    FLAME_FULL_SVG=$dest/flame-{server_name}.svg
    ICICLE_SVG=$dest/icicle-{server_name}-reduced.svg

    cd $home
    sudo -u {user} git clone https://github.com/brendangregg/FlameGraph.git

    apt-get -y install linux-tools-$(uname -r)
    sudo perf record -F $freq -a  -g --call-graph dwarf -o $PERF_FILE  -- su {user} -l -c /usr/local/bin/build-samba
    sudo perf script -i $PERF_FILE > $PERF_SCRIPT
    $home/FlameGraph/stackcollapse-perf.pl $PERF_SCRIPT > $PERF_FOLDED
    grep -P -v '^(git|cc|x86_64-linux-gnu-ld|as|gcc)'  $PERF_FOLDED > $PERF_REDUCED_FOLDED

    $home/FlameGraph/flamegraph.pl --minwidth 0.2 --width 1060  $PERF_REDUCED_FOLDED > $FLAME_REDUCED_SVG
    $home/FlameGraph/flamegraph.pl --minwidth 0.2 --width 1060  $PERF_FOLDED > $FLAME_FULL_SVG
    $home/FlameGraph/flamegraph.pl --reverse --inverted -colors=chain --minwidth 0.3 --width 1060 $PERF_REDUCED_FOLDED > $ICICLE_SVG


    send-multipart-email '{server_name} flame graphs'  $FLAME_REDUCED_SVG $ICICLE_SVG $FLAME_FULL_SVG
   path: /usr/local/bin/perf-record-build-samba
   permissions: '0755'

 - content: |
    #!/usr/bin/python
    import sys
    import smtplib
    import email
    import os
    from email.mime.image import MIMEImage
    from email.mime.multipart import MIMEMultipart as Message
    from email.mime.text import MIMEText

    server = 'smtp1.catalyst.net.nz'
    recipient = 'samba-dev@catalyst.net.nz'
    msg = Message()
    msg['Subject'] = sys.argv[1]
    msg['To'] = recipient
    msg['From'] = recipient

    for fn in sys.argv[2:]:
        f = open(fn, 'rb')
        a = MIMEImage(f.read(), 'svg+xml')
        f.close()
        save_fn = os.path.basename(fn)
        a.add_header('Content-Disposition','attachment', filename=save_fn)
        msg.attach(a)

    s = smtplib.SMTP(server)
    s.sendmail(recipient, [recipient], str(msg))
    s.quit()
   path: /usr/local/bin/send-multipart-email
   permissions: '0755'

 - content: |
    #!/bin/bash
    if [ "{flame_graphs}" == "True" ]; then
       /usr/local/bin/perf-record-build-samba
    else
       su {user} -l -c /usr/local/bin/build-samba
    fi
   path: /usr/local/bin/run-autobuild
   permissions: '0755'

 - content: |
    #!/bin/bash
    sleep 5d
    /usr/local/bin/delete-host
   path: /usr/local/bin/delayed-delete-host
   permissions: '0755'

 - content:
    HRNGDEVICE=/dev/urandom
   path: /etc/default/rng-tools

# If the build succeeds, it deletes the host at the end of build-samba.  Otherwise, we run delete-host or shelve-host depending on what the caller wanted
runcmd:
 - set -x
 - echo 0 > /proc/sys/kernel/yama/ptrace_scope
 - mount / -o remount,rw,nobarrier
 - /etc/init.d/rng-tools start
 - ln -sf /usr/bin/ld.gold /usr/bin/ld
 - [ blockdev, --setra, {readahead}, /dev/vda]
 - [ /usr/local/bin/prepare-autobuild-dir]
 - [ su, {user}, -l, -c, /usr/local/bin/clone-samba]
 - /usr/local/bin/run-autobuild
 - [ echo /usr/local/bin/{onfail}-host | sudo -u {user} at 'now + 5 minutes' ]
