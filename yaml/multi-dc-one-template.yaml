heat_template_version: 2014-10-16

description: >
  A template to create multiple Samba DCs across many networks.

parameters:
  count:
    default: 2
    type: number
    description: How many servers to build in total

  key_name:
    type: string
    description: Name of an existing key pair to use for the server
    constraints:
      - custom_constraint: nova.keypair

  user:
    type: string
    description: Admin user
    default: "ubuntu"
    constraints:
      - allowed_pattern: "[a-z_][a-z0-9_]{0,30}"
        description: Lowercase please, no fancy characters, not too long.

  tmpfs:
    type: string
    description: tmpfs flag
    default: "False"
    constraints:
      - allowed_pattern: "True|False"
        description: True to use tmpfs, False for real disk

  flavor:
    type: string
    description: Flavor for the server to be created
    default: c1.c2r4
    constraints:
      - custom_constraint: nova.flavor

  image:
    type: string
    default: ubuntu-15.04
    description: Image ID or image name to use for the server
    constraints:
      - custom_constraint: glance.image

  remote:
    type: string
    description: URL of git remote

  branch:
    type: string
    description: git branch to use

  samba_realm:
    type: string
    default: "SAMDOM.EXAMPLE.COM"
    description: Realm for the samba DCs

  samba_domain:
    type: string
    default: "SAMDOM"
    description: Domain for the samba DCs

  samba_password:
    type: string
    default: "penguin12#"
    description: Password for the samba DCs

  readahead:
    type: number
    default: 8192
    description: degree of Ceph readahead

  package_list:
    type: comma_delimited_list
    description: package to install

  skip_samba_build:
    type: string
    default: 'False'
    description: >
      Don't build samba, just install packages and git pull

  public_net:
    type: string
    default: public-net
    description: >
      ID or name of the public network

  private_net_name:
    type: string
    default: private-keep-out
    description: Name of private network to be created

  private_net_cidr_dns:
    default: 10.9.100.0/24
    type: string
    description: Private network address (CIDR notation)

  private_net_cidr_1:
    default: 10.9.1.0/24
    type: string
    description: Private network address (CIDR notation)

  private_net_cidr_2:
    default: 10.9.2.0/24
    type: string
    description: Private network address (CIDR notation)

  private_net_gateway_1:
    default: 10.9.1.1
    type: string
    description: Private network gateway address

  private_net_gateway_2:
    default: 10.9.2.1
    type: string
    description: Private network gateway address


resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template:
            _NAME_-network
          params:
            _NAME_: { get_param: "OS::stack_name" }

  private_subnet_dns:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr_dns }
      enable_dhcp: true

  private_subnet_1:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr_1 }
      enable_dhcp: true
      dns_nameservers: [10.9.100.10]

  private_subnet_2:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr_2 }
      enable_dhcp: true
      dns_nameservers: [10.9.100.10]

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface_1:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet_1 }

  router_interface_2:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet_2 }

  router_interface_dns:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet_dns }

  dns_server:
    type: OS::Nova::Server
    properties:
      #key_name: { get_param: key_name }
      image: { get_param: image }
      networks:
          - network: { get_resource: private_net }
            fixed_ip: 10.9.100.10
      flavor: { get_param: flavor }
      name:
        str_replace:
          template:
            _NAME_-dns
          params:
            _NAME_: { get_param: "OS::stack_name" }
      user_data_format: RAW
      user_data:
        get_resource: server_init_dns

  server_init_dns:
      type: OS::Heat::MultipartMime
      properties:
        parts:
        - config: {get_resource: get_packages_dns}
        - config: {get_resource: prepare_dns}

  get_packages_dns:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        packages: [bind9]

  prepare_dns:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
          - path: /etc/bind/named.conf.options
            content: |

              options {
                directory "/var/cache/bind";

                forwarders {
                      202.78.247.197;
                      202.78.247.198;
                      202.78.247.199;
                };

                //========================================================================
                // If BIND logs error messages about the root key being expired,
                // you will need to update your keys.  See https://www.isc.org/bind-keys
                //========================================================================
                dnssec-validation auto;

                auth-nxdomain no;    # conform to RFC1035
                listen-on-v6 { any; };

                allow-recursion {
                  10.9.1.0/16;
                };
              };


          - path: /etc/bind/named.conf.local
            content:
              str_replace:
                template: |
                  zone "_REALM_" {
                      type forward;
                      forwarders {
                        10.9.100.10;
                      };
                  };
                params:
                  _REALM_:  {get_param: samba_realm}
        runcmd:
          - service bind9 start

  servers_1:
    type: OS::Heat::ResourceGroup
    depends_on: private_subnet_1
    properties:
      count: { get_param: count }
      resource_def:
        type: OS::Nova::Server
        properties:
          #key_name: { get_param: key_name }
          image: { get_param: image }
          networks:
              - network: { get_resource: private_net }
                fixed_ip: 10.9.1.1%index%

          flavor: { get_param: flavor }
          name:
            str_replace:
              template:
                _NAME_-1-_INDEX_
              params:
                _NAME_: { get_param: "OS::stack_name" }
                _INDEX_: "%index%"
          user_data_format: RAW
          user_data:
            get_resource: server_init

  servers_2:
    type: OS::Heat::ResourceGroup
    depends_on: private_subnet_2
    properties:
      count: { get_param: count }
      resource_def:
        type: OS::Nova::Server
        properties:
          #key_name: { get_param: key_name }
          image: { get_param: image }
          networks:
              - network: { get_resource: private_net }
                fixed_ip: 10.9.2.1%index%

          flavor: { get_param: flavor }
          name:
            str_replace:
              template:
                _NAME_-2-_INDEX_
              params:
                _NAME_: { get_param: "OS::stack_name" }
                _INDEX_: "%index%"
          user_data_format: RAW
          user_data:
            get_resource: server_init

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: get_packages}
      - config: {get_resource: mount_script_dir}
      - config: {get_resource: prepare_samba}

  get_packages:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        packages:
          {get_param: package_list}

  mount_script_dir:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/sh
        mkdir -p /scripts
        mount -t ramfs -o defaults ramfs /scripts

  prepare_samba:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        bootcmd: |
          #!/bin/bash
          /bin/ping -w 300 -c 1 10.9.100.10
          for i in {1..100}; do
            /usr/bin/host catalyst.net.nz 10.9.100.10 && break
            /bin/sleep 5
          done

        write_files:
          - path: /scripts/prepare-autobuild-dir
            permissions: '0755'
            content:
              str_replace:
                template: |
                  #!/bin/bash
                  set -x
                  set -e
                  export AUTOBUILD=/home/_USER_/autobuild/
                  rm -rf $AUTOBUILD/*
                  mkdir -p $AUTOBUILD
                  [ "_TMPFS_" == "True" ] && mount -t tmpfs -o size=75% tmpfs $AUTOBUILD
                  chown _USER_  $AUTOBUILD
                params:
                  _USER_: { get_param: user }
                  _TMPFS_: { get_param: tmpfs }

          - path: /scripts/clone-samba
            permissions: '0755'
            content: |
              #!/bin/bash
              set -x
              set -e
              cd ~
              git clone git://git.catalyst.net.nz/samba.git
              cd samba
              git remote add catalyst git://git.catalyst.net.nz/samba.git
              git remote add abartlet git://git.samba.org/abartlet/samba.git
              git remote set-url origin git://git.samba.org/samba.git
              git fetch catalyst

          - path: /scripts/build-samba
            permissions: '0755'
            content:
              str_replace:
                template: |
                  #!/bin/bash
                  set -x
                  set -e
                  [ "_SKIP_" == "True" ] && exit 0
                  cd ~
                  cd samba
                  git remote rm our_repo && echo "removed old remote"
                  git remote add our_repo _REMOTE_
                  git fetch our_repo
                  git checkout our_repo/_BRANCH_
                  ./configure.developer
                  make
                  sudo make install
                params:
                  _SKIP_: {get_param: skip_samba_build}
                  _REMOTE_: {get_param: remote}
                  _BRANCH_: {get_param: branch}

          - path: /scripts/provision-dc
            permissions: '0755'
            content:
              str_replace:
                template: |
                  #!/bin/bash
                  set -x
                  for i in {1..100}; do
                    host catalyst.net.nz && break
                    sleep 5
                  done

                  /usr/local/samba/bin/samba-tool domain provision --use-rfc2307 \
                    --realm=_REALM_ \
                    --domain=_DOMAIN_ \
                    --server-role=dc \
                    --adminpass='_PASSWORD_' \
                    --krbtgtpass='_PASSWORD_' \
                    --machinepass='_PASSWORD_' \
                    --ldapadminpass='_PASSWORD_' \
                    --dnspass='_PASSWORD_'

                  sleep 1
                  /usr/local/samba/sbin/samba
                  sleep 1

                  MY_IP=$(ip addr |grep -oP '(?<=inet )10\.9\.\d+\.\d+')
                  echo -e "domain samdom.example.com\nnameserver $MY_IP" > /etc/resolv.conf

                  sudo -u _USER_ /usr/local/samba/bin/smbclient -L localhost -U%
                  sudo -u _USER_ /usr/local/samba/bin/smbclient //localhost/netlogon  -P -c 'ls'
                params:
                  _USER_: {get_param: user}
                  _REALM_:  {get_param: samba_realm}
                  _DOMAIN_:  {get_param: samba_domain}
                  _PASSWORD_:  {get_param: samba_password}
                  #_IP_: {get_attr: [my_server, networks, net0, 0]}

          - path: /scripts/join-dc
            permissions: '0755'
            content:
              str_replace:
                template: |
                  #!/bin/bash
                  set -x
                  for i in {1..100}; do
                    host samdom.example.com && break
                    sleep 5
                  done

                  MY_SUBNET=$(ip addr |grep -oP '(?<=inet )10\.9\.\d+')

                  echo -e "nameserver $MY_SUBNET.10\nsearch _REALM_" > /etc/resolv.conf

                  echo -e '[libdefaults]\ndns_lookup_realm = false\ndns_lookup_kdc = true\ndefault_realm = _REALM_' > /etc/krb5.conf

                  /usr/local/samba/bin/samba-tool domain join _REALM_ DC -UAdministrator \
                          --password='_PASSWORD_' --realm=_REALM_

                  sleep 1
                  /usr/local/samba/sbin/samba
                  sleep 1
                  sudo -u _USER_ /usr/local/samba/bin/smbclient -L localhost -U%
                  sudo -u _USER_ /usr/local/samba/bin/smbclient //localhost/netlogon  -P -c 'ls'
                params:
                  _USER_: {get_param: user}
                  _REALM_:  {get_param: samba_realm}
                  _DOMAIN_:  {get_param: samba_domain}
                  _PASSWORD_:  {get_param: samba_password}

          - path: /scripts/run
            permissions: '0755'
            content:
              str_replace:
                template: |
                  #!/bin/bash
                  set -x
                  echo this is /scripts/run
                  su _USER_ -l -c /scripts/prepare-autobuild-dir
                  su _USER_ -l -c /scripts/clone-samba
                  su _USER_ -l -c /scripts/build-samba
                  if [[ "$(hostname)" == '_NAME_-1-0' ]]; then
                     /scripts/provision-dc
                  else
                     /scripts/join-dc
                  fi
                params:
                  _NAME_: { get_param: "OS::stack_name" }
                  _USER_: {get_param: user}

        runcmd:
          - /scripts/run
